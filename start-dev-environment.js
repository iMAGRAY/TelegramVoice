#!/usr/bin/env node

const { spawn } = require('child_process');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ dev –æ–∫—Ä—É–∂–µ–Ω–∏—è TelegramVoice...');
console.log('='.repeat(50));

// –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
console.log('üì° –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞...');
const wsServer = spawn('npm', ['run', 'dev'], {
  cwd: './websocket-server',
  shell: true,
  stdio: 'pipe'
});

wsServer.stdout.on('data', (data) => {
  console.log('[WebSocket]', data.toString().trim());
});

wsServer.stderr.on('data', (data) => {
  console.error('[WebSocket Error]', data.toString().trim());
});

// –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
setTimeout(() => {
  console.log('\nüåê –ó–∞–ø—É—Å–∫ Next.js —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
  
  const frontendServer = spawn('npm', ['run', 'dev'], {
    cwd: './mini-app',
    shell: true,
    stdio: 'pipe'
  });

  frontendServer.stdout.on('data', (data) => {
    console.log('[Frontend]', data.toString().trim());
  });

  frontendServer.stderr.on('data', (data) => {
    console.error('[Frontend Error]', data.toString().trim());
  });

  frontendServer.on('close', (code) => {
    console.log(`Frontend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
    wsServer.kill();
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...');
    frontendServer.kill();
    wsServer.kill();
    process.exit(0);
  });

}, 3000);

wsServer.on('close', (code) => {
  console.log(`WebSocket —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
});

console.log('\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
console.log('   ‚Ä¢ WebSocket —Å–µ—Ä–≤–µ—Ä: ws://localhost:8080');
console.log('   ‚Ä¢ Frontend: http://localhost:3000');
console.log('   ‚Ä¢ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C');
console.log('='.repeat(50));