#!/bin/bash
# –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WEBSOCKET –°–ï–†–í–ï–†–ê

echo "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WEBSOCKET"
echo "===================================="
echo

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /root/TelegramVoice || exit 1

# 1. –ü–û–õ–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–ì–û
echo "1Ô∏è‚É£ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï –ø—Ä–æ—Ü–µ—Å—Å—ã..."
pm2 kill 2>/dev/null || true
killall -9 node 2>/dev/null || true
killall -9 signaling-server 2>/dev/null || true
pkill -f "signaling-server" 2>/dev/null || true
pkill -f "serve" 2>/dev/null || true

# –£–±–∏–≤–∞–µ–º –≤—Å–µ —á—Ç–æ —Å–ª—É—à–∞–µ—Ç –Ω–∞—à–∏ –ø–æ—Ä—Ç—ã
for port in 8080 3000; do
    pid=$(lsof -ti:$port 2>/dev/null)
    if [ ! -z "$pid" ]; then
        echo "–£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $pid –Ω–∞ –ø–æ—Ä—Ç—É $port"
        kill -9 $pid 2>/dev/null || true
    fi
done

sleep 2
echo "‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# 2. –ü–†–û–í–ï–†–ö–ê –ë–ò–ù–ê–†–ù–û–ì–û –§–ê–ô–õ–ê
echo
echo "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
BINARY="/root/TelegramVoice/signaling-server/target/release/signaling-server"

if [ -f "$BINARY" ]; then
    echo "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º..."
    file "$BINARY"
    chmod +x "$BINARY"
else
    echo "‚ùå –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–±–∏—Ä–∞–µ–º..."
    cd /root/TelegramVoice/signaling-server
    cargo clean
    RUST_LOG=debug cargo build --release
    if [ ! -f "$BINARY" ]; then
        echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å signaling-server!"
        exit 1
    fi
fi

# 3. –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –ó–ê–ü–£–°–ö–ê
echo
echo "3Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ signaling-server..."
cd /root/TelegramVoice/signaling-server
timeout 5 RUST_LOG=info ./target/release/signaling-server &
TEST_PID=$!
sleep 2

if lsof -i:8080 | grep -q LISTEN; then
    echo "‚úÖ –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    kill $TEST_PID 2>/dev/null || true
else
    echo "‚ùå –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:"
    ldd "$BINARY" | grep "not found" || echo "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –º–µ—Å—Ç–µ"
fi

# 4. –ù–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø PM2
echo
echo "4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PM2..."
cd /root/TelegramVoice

cat > ecosystem.config.js << 'EOF'
module.exports = {
  apps: [
    {
      name: 'ws-server',
      script: '/root/TelegramVoice/signaling-server/target/release/signaling-server',
      cwd: '/root/TelegramVoice/signaling-server',
      env: {
        RUST_LOG: 'info'
      },
      error_file: '/root/TelegramVoice/logs/ws-error.log',
      out_file: '/root/TelegramVoice/logs/ws-out.log',
      time: true,
      instances: 1,
      exec_mode: 'fork',
      autorestart: true,
      max_restarts: 50,
      min_uptime: '10s',
      watch: false
    },
    {
      name: 'web-server',
      script: '/usr/bin/serve',
      args: '-s /root/TelegramVoice/mini-app/out -l 3000 --no-clipboard',
      cwd: '/root/TelegramVoice/mini-app',
      env: {
        NODE_ENV: 'production'
      },
      error_file: '/root/TelegramVoice/logs/web-error.log',
      out_file: '/root/TelegramVoice/logs/web-out.log',
      time: true,
      instances: 1,
      exec_mode: 'fork',
      autorestart: true,
      max_restarts: 50,
      min_uptime: '10s',
      watch: false
    }
  ]
};
EOF

# 5. –ó–ê–ü–£–°–ö –ß–ï–†–ï–ó PM2
echo
echo "5Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ PM2..."
pm2 start ecosystem.config.js

# 6. –ñ–î–ï–ú –ò –ü–†–û–í–ï–†–Ø–ï–ú
echo
echo "6Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (15 —Å–µ–∫—É–Ω–¥)..."
for i in {1..15}; do
    echo -n "."
    sleep 1
done
echo

# 7. –°–¢–ê–¢–£–°
echo
echo "7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
pm2 list

# 8. –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê WEBSOCKET
echo
echo "8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
if pm2 list | grep -q "ws-server.*online"; then
    echo "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ws-server –∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å ws-server –ù–ï –∑–∞–ø—É—â–µ–Ω"
    echo "–õ–æ–≥–∏ –æ—à–∏–±–æ–∫:"
    tail -20 /root/TelegramVoice/logs/ws-error.log 2>/dev/null || echo "–ù–µ—Ç –ª–æ–≥–æ–≤"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
if lsof -i:8080 | grep -q LISTEN; then
    echo "‚úÖ –ü–æ—Ä—Ç 8080 —Å–ª—É—à–∞–µ—Ç—Å—è"
    lsof -i:8080
else
    echo "‚ùå –ü–æ—Ä—Ç 8080 –ù–ï —Å–ª—É—à–∞–µ—Ç—Å—è"
fi

# –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
if timeout 3 bash -c "</dev/tcp/localhost/8080" 2>/dev/null; then
    echo "‚úÖ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

# 9. –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ó–ê–ü–£–°–ö
if ! lsof -i:8080 | grep -q LISTEN; then
    echo
    echo "9Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PM2 –ø—Ä–æ—Ü–µ—Å—Å
    pm2 delete ws-server 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ nohup
    cd /root/TelegramVoice/signaling-server
    nohup RUST_LOG=info ./target/release/signaling-server > /root/TelegramVoice/logs/ws-direct.log 2>&1 &
    echo $! > /root/TelegramVoice/ws-server.pid
    
    sleep 5
    
    if lsof -i:8080 | grep -q LISTEN; then
        echo "‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω!"
        echo "PID: $(cat /root/TelegramVoice/ws-server.pid)"
    else
        echo "‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
fi

# 10. –†–ï–ó–ï–†–í–ù–´–ô WEBSOCKET –°–ï–†–í–ï–†
if ! lsof -i:8080 | grep -q LISTEN; then
    echo
    echo "üÜò –ó–∞–ø—É—Å–∫–∞–µ–º –†–ï–ó–ï–†–í–ù–´–ô WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞ Node.js..."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ws –º–æ–¥—É–ª—å –µ—Å–ª–∏ –Ω–µ—Ç
    cd /root/TelegramVoice
    if [ ! -d "node_modules/ws" ]; then
        npm install ws
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    pm2 start backup-ws-server.js --name backup-ws
    sleep 5
    
    if lsof -i:8080 | grep -q LISTEN; then
        echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!"
    else
        echo "‚ùå –î–∞–∂–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"
    fi
fi

# 11. –ü–†–û–í–ï–†–ö–ê NGINX
echo
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ nginx..."
chmod +x check-nginx-ws.sh
./check-nginx-ws.sh

# 12. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
echo
echo "üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:"
echo "====================="

WS_OK=false
HTTP_OK=false

# WebSocket
if timeout 5 bash -c "cat < /dev/tcp/localhost/8080" &>/dev/null; then
    echo "‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –†–ê–ë–û–¢–ê–ï–¢"
    WS_OK=true
else
    echo "‚ùå WebSocket —Å–µ—Ä–≤–µ—Ä –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
fi

# HTTP
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 http://localhost:3000 || echo "000")
if [[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "404" ]]; then
    echo "‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –†–ê–ë–û–¢–ê–ï–¢ (–∫–æ–¥ $HTTP_CODE)"
    HTTP_OK=true
else
    echo "‚ùå HTTP —Å–µ—Ä–≤–µ—Ä –ù–ï –†–ê–ë–û–¢–ê–ï–¢ (–∫–æ–¥ $HTTP_CODE)"
fi

# –†–µ–∑—É–ª—å—Ç–∞—Ç
if [ "$WS_OK" = true ] && [ "$HTTP_OK" = true ]; then
    echo
    echo "üéâ –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢!"
    pm2 save
else
    echo
    echo "üö® –ü–†–û–ë–õ–ï–ú–´ –ù–ï –†–ï–®–ï–ù–´!"
    echo
    echo "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
    echo "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª: ufw status"
    echo "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f /root/TelegramVoice/logs/*"
    echo "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–º—è—Ç—å: free -h"
    echo "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Å–∫: df -h"
    exit 1
fi