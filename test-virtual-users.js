#!/usr/bin/env node

const WebSocket = require('ws');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

console.log(`${colors.bright}${colors.blue}üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ò–†–¢–£–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô${colors.reset}`);
console.log('='.repeat(60));

class VirtualUser {
  constructor(name, avatar = 'üë§') {
    this.name = name;
    this.avatar = avatar;
    this.id = `user-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;
    this.ws = null;
    this.messages = [];
    this.currentRoom = null;
    this.microphoneEnabled = false;
    this.connected = false;
  }

  async connect(wsUrl = 'ws://localhost:8080') {
    return new Promise((resolve, reject) => {
      console.log(`${colors.yellow}üîå ${this.name} –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ ${wsUrl}...${colors.reset}`);
      
      this.ws = new WebSocket(wsUrl);
      
      this.ws.on('open', () => {
        this.connected = true;
        console.log(`${colors.green}‚úÖ ${this.name} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ${colors.reset}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        this.sendMessage({
          —Ç–∏–ø: '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
          –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {
            id: this.id,
            –∏–º—è: this.name,
            –∞–≤–∞—Ç–∞—Ä: this.avatar,
            –ø–æ–¥–∫–ª—é—á–µ–Ω: true,
            –º–∏–∫—Ä–æ—Ñ–æ–Ω_–≤–∫–ª—é—á–µ–Ω: false,
            –≥–æ–≤–æ—Ä–∏—Ç: false
          }
        });
        
        resolve();
      });

      this.ws.on('message', (data) => {
        try {
          const message = JSON.parse(data.toString());
          this.messages.push(message);
          this.handleMessage(message);
        } catch (error) {
          console.error(`${colors.red}‚ùå ${this.name}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è${colors.reset}`, error);
        }
      });

      this.ws.on('error', (error) => {
        console.error(`${colors.red}‚ùå ${this.name}: –æ—à–∏–±–∫–∞ WebSocket${colors.reset}`, error.message);
        reject(error);
      });

      this.ws.on('close', (code, reason) => {
        this.connected = false;
        console.log(`${colors.yellow}üëã ${this.name} –æ—Ç–∫–ª—é—á–∏–ª—Å—è (–∫–æ–¥: ${code})${colors.reset}`);
      });

      // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setTimeout(() => {
        if (!this.connected) {
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'));
        }
      }, 5000);
    });
  }

  sendMessage(message) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(message));
    } else {
      console.error(`${colors.red}‚ùå ${this.name}: WebSocket –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏${colors.reset}`);
    }
  }

  handleMessage(message) {
    switch (message.—Ç–∏–ø) {
      case '–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã':
        const roomNames = message.–∫–æ–º–Ω–∞—Ç—ã.map(–∫ => –∫.–Ω–∞–∑–≤–∞–Ω–∏–µ).join(', ');
        console.log(`${colors.blue}üìã ${this.name} –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç: [${roomNames}]${colors.reset}`);
        break;
      
      case '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è-–∫-–∫–æ–º–Ω–∞—Ç–µ':
        this.currentRoom = message.–∫–æ–º–Ω–∞—Ç–∞.id;
        console.log(`${colors.green}üè† ${this.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ "${message.–∫–æ–º–Ω–∞—Ç–∞.–Ω–∞–∑–≤–∞–Ω–∏–µ}"${colors.reset}`);
        break;
      
      case '—É—á–∞—Å—Ç–Ω–∏–∫–∏-–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã':
        const participants = message.—É—á–∞—Å—Ç–Ω–∏–∫–∏.map(—É => —É.–∏–º—è).join(', ');
        console.log(`${colors.magenta}üë• ${this.name} –≤–∏–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: [${participants}] (–≤—Å–µ–≥–æ: ${message.—É—á–∞—Å—Ç–Ω–∏–∫–∏.length})${colors.reset}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (message.—É—á–∞—Å—Ç–Ω–∏–∫–∏.length > 1) {
          console.log(`${colors.bright}${colors.green}‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞!${colors.reset}`);
        }
        break;
      
      case 'webrtc-signal':
        console.log(`${colors.cyan}üîÑ ${this.name} –ø–æ–ª—É—á–∏–ª WebRTC —Å–∏–≥–Ω–∞–ª –æ—Ç ${message.–æ—Ç} (—Ç–∏–ø: ${message.–¥–∞–Ω–Ω—ã–µ.type})${colors.reset}`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ offer —Å answer
        if (message.–¥–∞–Ω–Ω—ã–µ.type === 'offer') {
          setTimeout(() => {
            this.sendWebRTCSignal(message.–æ—Ç, { 
              type: 'answer', 
              sdp: 'mock-answer-sdp-' + Date.now() 
            });
          }, 500);
        }
        break;
      
      case '–º–∏–∫—Ä–æ—Ñ–æ–Ω-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω':
        const status = message.–≤–∫–ª—é—á–µ–Ω ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω';
        console.log(`${colors.yellow}üé§ ${this.name} –≤–∏–¥–∏—Ç: –º–∏–∫—Ä–æ—Ñ–æ–Ω ${status} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${message.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id}${colors.reset}`);
        break;
      
      case '–≥–æ–≤–æ—Ä–∏—Ç':
        console.log(`${colors.cyan}üó£Ô∏è ${this.name} –≤–∏–¥–∏—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id} ${message.–≥–æ–≤–æ—Ä–∏—Ç ? '–≥–æ–≤–æ—Ä–∏—Ç' : '–ø–µ—Ä–µ—Å—Ç–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å'}${colors.reset}`);
        break;
      
      case '–æ—à–∏–±–∫–∞':
        console.error(`${colors.red}‚ùå ${this.name} –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É: ${message.—Å–æ–æ–±—â–µ–Ω–∏–µ}${colors.reset}`);
        break;
      
      default:
        console.log(`${colors.cyan}üì® ${this.name} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.—Ç–∏–ø}${colors.reset}`);
    }
  }

  joinRoom(roomId) {
    console.log(`${colors.yellow}üì§ ${this.name} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ "${roomId}"${colors.reset}`);
    this.sendMessage({
      —Ç–∏–ø: '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è-–∫-–∫–æ–º–Ω–∞—Ç–µ',
      –∫–æ–º–Ω–∞—Ç–∞_id: roomId,
      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.id
    });
  }

  sendWebRTCSignal(to, data) {
    if (this.currentRoom) {
      console.log(`${colors.cyan}üì§ ${this.name} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç WebRTC —Å–∏–≥–Ω–∞–ª (${data.type}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${to}${colors.reset}`);
      this.sendMessage({
        —Ç–∏–ø: 'webrtc-signal',
        –æ—Ç: this.id,
        –∫: to,
        –∫–æ–º–Ω–∞—Ç–∞: this.currentRoom,
        –¥–∞–Ω–Ω—ã–µ: data
      });
    }
  }

  toggleMicrophone(enabled) {
    if (this.currentRoom) {
      this.microphoneEnabled = enabled;
      console.log(`${colors.yellow}üé§ ${this.name} ${enabled ? '–≤–∫–ª—é—á–∞–µ—Ç' : '–≤—ã–∫–ª—é—á–∞–µ—Ç'} –º–∏–∫—Ä–æ—Ñ–æ–Ω${colors.reset}`);
      this.sendMessage({
        —Ç–∏–ø: '–º–∏–∫—Ä–æ—Ñ–æ–Ω-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω',
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.id,
        –∫–æ–º–Ω–∞—Ç–∞_id: this.currentRoom,
        –≤–∫–ª—é—á–µ–Ω: enabled
      });
    }
  }

  startSpeaking() {
    if (this.currentRoom && this.microphoneEnabled) {
      console.log(`${colors.cyan}üó£Ô∏è ${this.name} –Ω–∞—á–∏–Ω–∞–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å${colors.reset}`);
      this.sendMessage({
        —Ç–∏–ø: '–≥–æ–≤–æ—Ä–∏—Ç',
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.id,
        –∫–æ–º–Ω–∞—Ç–∞_id: this.currentRoom,
        –≥–æ–≤–æ—Ä–∏—Ç: true
      });
    }
  }

  stopSpeaking() {
    if (this.currentRoom) {
      console.log(`${colors.cyan}ü§ê ${this.name} –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å${colors.reset}`);
      this.sendMessage({
        —Ç–∏–ø: '–≥–æ–≤–æ—Ä–∏—Ç',
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.id,
        –∫–æ–º–Ω–∞—Ç–∞_id: this.currentRoom,
        –≥–æ–≤–æ—Ä–∏—Ç: false
      });
    }
  }

  disconnect() {
    if (this.ws) {
      this.ws.close();
    }
  }
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function runTests() {
  console.log(`\n${colors.bright}üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í${colors.reset}`);
  console.log('='.repeat(40));

  // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const alice = new VirtualUser('–ê–ª–∏—Å–∞', 'üë©');
  const bob = new VirtualUser('–ë–æ–±', 'üë®');
  const charlie = new VirtualUser('–ß–∞—Ä–ª–∏', 'üßë');

  try {
    console.log(`\n${colors.bright}–¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π${colors.reset}`);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–µ—Ä–µ–¥–∏
    await alice.connect();
    await delay(1000);
    
    await bob.connect();
    await delay(1000);
    
    await charlie.connect();
    await delay(2000);

    console.log(`\n${colors.bright}–¢–µ—Å—Ç 2: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ${colors.reset}`);
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ "general"
    alice.joinRoom('general');
    await delay(1000);
    
    bob.joinRoom('general');
    await delay(1000);
    
    charlie.joinRoom('general');
    await delay(3000);

    console.log(`\n${colors.bright}–¢–µ—Å—Ç 3: WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥${colors.reset}`);
    
    // –ê–ª–∏—Å–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–æ–±–æ–º
    alice.sendWebRTCSignal(bob.id, { 
      type: 'offer', 
      sdp: 'mock-offer-sdp-' + Date.now() 
    });
    await delay(2000);

    console.log(`\n${colors.bright}–¢–µ—Å—Ç 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º${colors.reset}`);
    
    // –í–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã
    alice.toggleMicrophone(true);
    await delay(500);
    
    bob.toggleMicrophone(true);
    await delay(500);
    
    charlie.toggleMicrophone(false); // –ß–∞—Ä–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    await delay(1000);

    console.log(`\n${colors.bright}–¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ—á–∏${colors.reset}`);
    
    // –ê–ª–∏—Å–∞ –≥–æ–≤–æ—Ä–∏—Ç
    alice.startSpeaking();
    await delay(2000);
    alice.stopSpeaking();
    await delay(1000);
    
    // –ë–æ–± –æ—Ç–≤–µ—á–∞–µ—Ç
    bob.startSpeaking();
    await delay(1500);
    bob.stopSpeaking();
    await delay(1000);

    console.log(`\n${colors.bright}–¢–µ—Å—Ç 6: –°–º–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã${colors.reset}`);
    
    // –ß–∞—Ä–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥—É—é –∫–æ–º–Ω–∞—Ç—É
    charlie.joinRoom('music');
    await delay(2000);

    console.log(`\n${colors.bright}${colors.green}‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!${colors.reset}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    showTestResults([alice, bob, charlie]);

  } catch (error) {
    console.error(`${colors.red}‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•:${colors.reset}`, error.message);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log(`\n${colors.yellow}üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...${colors.reset}`);
    alice.disconnect();
    bob.disconnect();
    charlie.disconnect();
    
    setTimeout(() => {
      process.exit(0);
    }, 1000);
  }
}

function showTestResults(users) {
  console.log('\n' + '='.repeat(60));
  console.log(`${colors.bright}${colors.green}üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø${colors.reset}`);
  console.log('='.repeat(60));
  
  users.forEach(user => {
    console.log(`${colors.cyan}üë§ ${user.name}:${colors.reset}`);
    console.log(`   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω: ${user.connected ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ –ö–æ–º–Ω–∞—Ç–∞: ${user.currentRoom || '–Ω–µ—Ç'}`);
    console.log(`   ‚Ä¢ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: ${user.microphoneEnabled ? 'üé§ –≤–∫–ª—é—á–µ–Ω' : 'üîá –≤—ã–∫–ª—é—á–µ–Ω'}`);
    console.log(`   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: ${user.messages.length}`);
  });
  
  console.log(`\n${colors.green}‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:${colors.reset}`);
  console.log(`   ‚Ä¢ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è`);
  console.log(`   ‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–∞–º`);
  console.log(`   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
  console.log(`   ‚Ä¢ WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥`);
  console.log(`   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º`);
  console.log(`   ‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–µ—á–∏`);
  console.log(`   ‚Ä¢ –°–º–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç`);
  
  console.log('='.repeat(60));
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebSocket —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerAvailability() {
  console.log(`${colors.yellow}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞...${colors.reset}`);
  
  try {
    const testWs = new WebSocket('ws://localhost:8080');
    
    return new Promise((resolve, reject) => {
      testWs.on('open', () => {
        console.log(`${colors.green}‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ws://localhost:8080${colors.reset}`);
        testWs.close();
        resolve(true);
      });
      
      testWs.on('error', (error) => {
        console.error(`${colors.red}‚ùå WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:${colors.reset}`, error.message);
        reject(error);
      });
      
      setTimeout(() => {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'));
      }, 3000);
    });
  } catch (error) {
    throw error;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    await checkServerAvailability();
    await delay(1000);
    await runTests();
  } catch (error) {
    console.error(`${colors.red}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:${colors.reset}`, error.message);
    console.log(`\n${colors.yellow}üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:${colors.reset}`);
    console.log(`   cd websocket-server && npm run dev`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
main();