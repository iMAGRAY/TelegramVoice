#!/usr/bin/env node

const { spawn } = require('child_process');
const WebSocket = require('ws');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

console.log(`${colors.bright}${colors.blue}üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞${colors.reset}`);
console.log('='.repeat(50));

// –ó–∞–ø—É—Å–∫–∞–µ–º Next.js —Å–µ—Ä–≤–µ—Ä
const nextProcess = spawn('npm', ['run', 'dev'], {
  cwd: __dirname,
  shell: true,
  env: { ...process.env, NODE_ENV: 'development' }
});

nextProcess.stdout.on('data', (data) => {
  process.stdout.write(`${colors.cyan}[Next.js]${colors.reset} ${data}`);
});

nextProcess.stderr.on('data', (data) => {
  process.stderr.write(`${colors.red}[Next.js Error]${colors.reset} ${data}`);
});

// –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
console.log(`${colors.yellow}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...${colors.reset}`);

setTimeout(async () => {
  console.log(`\n${colors.green}‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤${colors.reset}`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ API
  try {
    const response = await fetch('http://localhost:8081/api/websocket');
    const status = await response.json();
    console.log(`${colors.green}‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:${colors.reset}`, status);
  } catch (error) {
    console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:${colors.reset}`, error);
  }

  console.log(`\n${colors.bright}${colors.magenta}üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...${colors.reset}`);
  console.log('='.repeat(50));

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  runTests();
}, 5000);

async function runTests() {
  console.log(`\n${colors.bright}–¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π${colors.reset}`);
  
  const user1 = new TestUser('–ê–ª–∏—Å–∞');
  const user2 = new TestUser('–ë–æ–±');

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await user1.connect();
    await delay(500);
    await user2.connect();
    await delay(1000);

    console.log(`\n${colors.bright}–¢–µ—Å—Ç 2: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ${colors.reset}`);
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    user1.joinRoom('general');
    await delay(500);
    user2.joinRoom('general');
    await delay(2000);

    console.log(`\n${colors.bright}–¢–µ—Å—Ç 3: WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥${colors.reset}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebRTC —Å–∏–≥–Ω–∞–ª
    user1.sendWebRTCSignal(user2.id, { type: 'offer', sdp: 'test-sdp' });
    await delay(1000);

    console.log(`\n${colors.bright}–¢–µ—Å—Ç 4: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞${colors.reset}`);
    
    user1.toggleMicrophone(true);
    await delay(1000);

    console.log(`\n${colors.bright}${colors.green}‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!${colors.reset}`);
    
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
    user1.disconnect();
    user2.disconnect();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    showTestResults();

  } catch (error) {
    console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:${colors.reset}`, error);
  }
}

class TestUser {
  constructor(name) {
    this.name = name;
    this.id = `user-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;
    this.ws = null;
    this.messages = [];
    this.currentRoom = null;
  }

  async connect() {
    return new Promise((resolve, reject) => {
      this.ws = new WebSocket('ws://localhost:8080');
      
      this.ws.on('open', () => {
        console.log(`${colors.green}‚úÖ ${this.name} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è${colors.reset}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        this.ws.send(JSON.stringify({
          —Ç–∏–ø: '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
          –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {
            id: this.id,
            –∏–º—è: this.name,
            –∞–≤–∞—Ç–∞—Ä: 'üë§',
            –ø–æ–¥–∫–ª—é—á–µ–Ω: true,
            –º–∏–∫—Ä–æ—Ñ–æ–Ω_–≤–∫–ª—é—á–µ–Ω: false,
            –≥–æ–≤–æ—Ä–∏—Ç: false
          }
        }));
        
        resolve();
      });

      this.ws.on('message', (data) => {
        try {
          const message = JSON.parse(data.toString());
          this.messages.push(message);
          this.handleMessage(message);
        } catch (error) {
          console.error(`${colors.red}‚ùå ${this.name}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞${colors.reset}`);
        }
      });

      this.ws.on('error', (error) => {
        console.error(`${colors.red}‚ùå ${this.name}: –æ—à–∏–±–∫–∞ WebSocket${colors.reset}`, error);
        reject(error);
      });

      this.ws.on('close', () => {
        console.log(`${colors.yellow}üëã ${this.name} –æ—Ç–∫–ª—é—á–∏–ª—Å—è${colors.reset}`);
      });
    });
  }

  handleMessage(message) {
    switch (message.—Ç–∏–ø) {
      case '–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã':
        console.log(`${colors.blue}üìã ${this.name} –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç: [${message.–∫–æ–º–Ω–∞—Ç—ã.map(–∫ => –∫.–Ω–∞–∑–≤–∞–Ω–∏–µ).join(', ')}]${colors.reset}`);
        break;
      
      case '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è-–∫-–∫–æ–º–Ω–∞—Ç–µ':
        this.currentRoom = message.–∫–æ–º–Ω–∞—Ç–∞.id;
        console.log(`${colors.green}üè† ${this.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ "${message.–∫–æ–º–Ω–∞—Ç–∞.–Ω–∞–∑–≤–∞–Ω–∏–µ}"${colors.reset}`);
        break;
      
      case '—É—á–∞—Å—Ç–Ω–∏–∫–∏-–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã':
        const participants = message.—É—á–∞—Å—Ç–Ω–∏–∫–∏.map(—É => —É.–∏–º—è).join(', ');
        console.log(`${colors.magenta}üë• ${this.name} –≤–∏–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: [${participants}]${colors.reset}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–∏–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (message.—É—á–∞—Å—Ç–Ω–∏–∫–∏.length > 1) {
          console.log(`${colors.bright}${colors.green}‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞!${colors.reset}`);
        }
        break;
      
      case 'webrtc-signal':
        console.log(`${colors.cyan}üîÑ ${this.name} –ø–æ–ª—É—á–∏–ª WebRTC —Å–∏–≥–Ω–∞–ª –æ—Ç ${message.–æ—Ç}${colors.reset}`);
        break;
      
      case '–º–∏–∫—Ä–æ—Ñ–æ–Ω-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω':
        console.log(`${colors.yellow}üé§ ${this.name} –≤–∏–¥–∏—Ç: –º–∏–∫—Ä–æ—Ñ–æ–Ω ${message.–≤–∫–ª—é—á–µ–Ω ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${message.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id}${colors.reset}`);
        break;
      
      case '–æ—à–∏–±–∫–∞':
        console.error(`${colors.red}‚ùå ${this.name} –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É: ${message.—Å–æ–æ–±—â–µ–Ω–∏–µ}${colors.reset}`);
        break;
    }
  }

  joinRoom(roomId) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify({
        —Ç–∏–ø: '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è-–∫-–∫–æ–º–Ω–∞—Ç–µ',
        –∫–æ–º–Ω–∞—Ç–∞_id: roomId,
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.id
      }));
      console.log(`${colors.yellow}üì§ ${this.name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ "${roomId}"${colors.reset}`);
    }
  }

  sendWebRTCSignal(to, data) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN && this.currentRoom) {
      this.ws.send(JSON.stringify({
        —Ç–∏–ø: 'webrtc-signal',
        –æ—Ç: this.id,
        –∫: to,
        –∫–æ–º–Ω–∞—Ç–∞: this.currentRoom,
        –¥–∞–Ω–Ω—ã–µ: data
      }));
      console.log(`${colors.cyan}üì§ ${this.name} –æ—Ç–ø—Ä–∞–≤–∏–ª WebRTC —Å–∏–≥–Ω–∞–ª${colors.reset}`);
    }
  }

  toggleMicrophone(enabled) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN && this.currentRoom) {
      this.ws.send(JSON.stringify({
        —Ç–∏–ø: '–º–∏–∫—Ä–æ—Ñ–æ–Ω-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω',
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.id,
        –∫–æ–º–Ω–∞—Ç–∞_id: this.currentRoom,
        –≤–∫–ª—é—á–µ–Ω: enabled
      }));
      console.log(`${colors.yellow}üé§ ${this.name} ${enabled ? '–≤–∫–ª—é—á–∏–ª' : '–≤—ã–∫–ª—é—á–∏–ª'} –º–∏–∫—Ä–æ—Ñ–æ–Ω${colors.reset}`);
    }
  }

  disconnect() {
    if (this.ws) {
      this.ws.close();
    }
  }
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function showTestResults() {
  console.log('\n' + '='.repeat(50));
  console.log(`${colors.bright}${colors.green}üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø${colors.reset}`);
  console.log('='.repeat(50));
  console.log(`${colors.green}‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç${colors.reset}`);
  console.log(`${colors.green}‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–∞–º${colors.reset}`);
  console.log(`${colors.green}‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ${colors.reset}`);
  console.log(`${colors.green}‚úÖ WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç${colors.reset}`);
  console.log(`${colors.green}‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç${colors.reset}`);
  console.log('='.repeat(50));
  console.log(`\n${colors.yellow}üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${colors.reset}`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log(`\n${colors.yellow}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...${colors.reset}`);
  nextProcess.kill();
  process.exit(0);
});