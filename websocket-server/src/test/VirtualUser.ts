import WebSocket from 'ws';
import { v4 as uuidv4 } from 'uuid';
import type { –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –°–æ–æ–±—â–µ–Ω–∏–µ–°–µ—Ä–≤–µ—Ä–∞ } from '@/types';

export class VirtualUser {
  private ws: WebSocket | null = null;
  private userId: string;
  private –∏–º—è: string;
  private currentRoom: string | null = null;
  private messageLog: Array<{ –≤—Ä–µ–º—è: Date; —Ç–∏–ø: string; –¥–∞–Ω–Ω—ã–µ: any }> = [];
  private onMessageCallback?: (message: –°–æ–æ–±—â–µ–Ω–∏–µ–°–µ—Ä–≤–µ—Ä–∞) => void;

  constructor(–∏–º—è: string) {
    this.userId = `user-${uuidv4()}`;
    this.–∏–º—è = –∏–º—è;
  }

  async connect(url: string): Promise<void> {
    return new Promise((resolve, reject) => {
      this.ws = new WebSocket(url);
      
      this.ws.on('open', () => {
        console.log(`‚úÖ ${this.–∏–º—è} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);
        this.sendJoinMessage();
        resolve();
      });

      this.ws.on('message', (data) => {
        try {
          const message = JSON.parse(data.toString()) as –°–æ–æ–±—â–µ–Ω–∏–µ–°–µ—Ä–≤–µ—Ä–∞;
          this.logMessage(message);
          
          if (this.onMessageCallback) {
            this.onMessageCallback(message);
          }

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          this.handleMessage(message);
        } catch (error) {
          console.error(`‚ùå ${this.–∏–º—è}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞`, error);
        }
      });

      this.ws.on('close', () => {
        console.log(`üëã ${this.–∏–º—è} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
        this.ws = null;
      });

      this.ws.on('error', (error) => {
        console.error(`‚ùå ${this.–∏–º—è}: –æ—à–∏–±–∫–∞ WebSocket`, error);
        reject(error);
      });
    });
  }

  private sendJoinMessage() {
    const –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = {
      id: this.userId,
      –∏–º—è: this.–∏–º—è,
      –∞–≤–∞—Ç–∞—Ä: 'üë§',
      –ø–æ–¥–∫–ª—é—á–µ–Ω: true,
      –º–∏–∫—Ä–æ—Ñ–æ–Ω_–≤–∫–ª—é—á–µ–Ω: false,
      –≥–æ–≤–æ—Ä–∏—Ç: false
    };

    this.send({
      —Ç–∏–ø: '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    });
  }

  private handleMessage(message: –°–æ–æ–±—â–µ–Ω–∏–µ–°–µ—Ä–≤–µ—Ä–∞) {
    switch (message.—Ç–∏–ø) {
      case '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è-–∫-–∫–æ–º–Ω–∞—Ç–µ':
        this.currentRoom = message.–∫–æ–º–Ω–∞—Ç–∞.id;
        console.log(`üè† ${this.–∏–º—è} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ "${message.–∫–æ–º–Ω–∞—Ç–∞.–Ω–∞–∑–≤–∞–Ω–∏–µ}"`);
        break;
      
      case '—É—á–∞—Å—Ç–Ω–∏–∫–∏-–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã':
        console.log(`üë• ${this.–∏–º—è} –≤–∏–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: [${message.—É—á–∞—Å—Ç–Ω–∏–∫–∏.map(—É => —É.–∏–º—è).join(', ')}]`);
        break;
      
      case '–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã':
        console.log(`üìã ${this.–∏–º—è} –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç: [${message.–∫–æ–º–Ω–∞—Ç—ã.map(–∫ => –∫.–Ω–∞–∑–≤–∞–Ω–∏–µ).join(', ')}]`);
        break;
    }
  }

  joinRoom(roomId: string): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.error(`‚ùå ${this.–∏–º—è}: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω`);
      return;
    }

    this.send({
      —Ç–∏–ø: '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è-–∫-–∫–æ–º–Ω–∞—Ç–µ',
      –∫–æ–º–Ω–∞—Ç–∞_id: roomId,
      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.userId
    });
  }

  leaveRoom(): void {
    if (!this.currentRoom) return;

    this.send({
      —Ç–∏–ø: '–ø–æ–∫–∏–Ω—É—Ç—å-–∫–æ–º–Ω–∞—Ç—É',
      –∫–æ–º–Ω–∞—Ç–∞_id: this.currentRoom,
      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.userId
    });
    this.currentRoom = null;
  }

  toggleMicrophone(enabled: boolean): void {
    if (!this.currentRoom) return;

    this.send({
      —Ç–∏–ø: '–º–∏–∫—Ä–æ—Ñ–æ–Ω-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω',
      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.userId,
      –∫–æ–º–Ω–∞—Ç–∞_id: this.currentRoom,
      –≤–∫–ª—é—á–µ–Ω: enabled
    });
  }

  sendWebRTCSignal(to: string, data: any): void {
    if (!this.currentRoom) return;

    this.send({
      —Ç–∏–ø: 'webrtc-signal',
      –æ—Ç: this.userId,
      –∫: to,
      –∫–æ–º–Ω–∞—Ç–∞: this.currentRoom,
      –¥–∞–Ω–Ω—ã–µ: data
    });
  }

  private send(data: any): void {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(data));
      console.log(`üì§ ${this.–∏–º—è} –æ—Ç–ø—Ä–∞–≤–∏–ª:`, data.—Ç–∏–ø);
    }
  }

  private logMessage(message: –°–æ–æ–±—â–µ–Ω–∏–µ–°–µ—Ä–≤–µ—Ä–∞): void {
    this.messageLog.push({
      –≤—Ä–µ–º—è: new Date(),
      —Ç–∏–ø: message.—Ç–∏–ø,
      –¥–∞–Ω–Ω—ã–µ: message
    });
  }

  onMessage(callback: (message: –°–æ–æ–±—â–µ–Ω–∏–µ–°–µ—Ä–≤–µ—Ä–∞) => void): void {
    this.onMessageCallback = callback;
  }

  getMessageLog(): Array<{ –≤—Ä–µ–º—è: Date; —Ç–∏–ø: string; –¥–∞–Ω–Ω—ã–µ: any }> {
    return this.messageLog;
  }

  getLastMessage(): –°–æ–æ–±—â–µ–Ω–∏–µ–°–µ—Ä–≤–µ—Ä–∞ | null {
    const last = this.messageLog[this.messageLog.length - 1];
    return last ? last.–¥–∞–Ω–Ω—ã–µ : null;
  }

  disconnect(): void {
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
  }

  get name(): string {
    return this.–∏–º—è;
  }

  get id(): string {
    return this.userId;
  }

  get room(): string | null {
    return this.currentRoom;
  }
}