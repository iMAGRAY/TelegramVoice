"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualUser = void 0;
const ws_1 = __importDefault(require("ws"));
const uuid_1 = require("uuid");
class VirtualUser {
    constructor(–∏–º—è) {
        this.ws = null;
        this.currentRoom = null;
        this.messageLog = [];
        this.userId = `user-${(0, uuid_1.v4)()}`;
        this.–∏–º—è = –∏–º—è;
    }
    async connect(url) {
        return new Promise((resolve, reject) => {
            this.ws = new ws_1.default(url);
            this.ws.on('open', () => {
                console.log(`‚úÖ ${this.–∏–º—è} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);
                this.sendJoinMessage();
                resolve();
            });
            this.ws.on('message', (data) => {
                try {
                    const message = JSON.parse(data.toString());
                    this.logMessage(message);
                    if (this.onMessageCallback) {
                        this.onMessageCallback(message);
                    }
                    this.handleMessage(message);
                }
                catch (error) {
                    console.error(`‚ùå ${this.–∏–º—è}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞`, error);
                }
            });
            this.ws.on('close', () => {
                console.log(`üëã ${this.–∏–º—è} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
                this.ws = null;
            });
            this.ws.on('error', (error) => {
                console.error(`‚ùå ${this.–∏–º—è}: –æ—à–∏–±–∫–∞ WebSocket`, error);
                reject(error);
            });
        });
    }
    sendJoinMessage() {
        const –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = {
            id: this.userId,
            –∏–º—è: this.–∏–º—è,
            –∞–≤–∞—Ç–∞—Ä: 'üë§',
            –ø–æ–¥–∫–ª—é—á–µ–Ω: true,
            –º–∏–∫—Ä–æ—Ñ–æ–Ω_–≤–∫–ª—é—á–µ–Ω: false,
            –≥–æ–≤–æ—Ä–∏—Ç: false
        };
        this.send({
            —Ç–∏–ø: '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        });
    }
    handleMessage(message) {
        switch (message.—Ç–∏–ø) {
            case '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è-–∫-–∫–æ–º–Ω–∞—Ç–µ':
                this.currentRoom = message.–∫–æ–º–Ω–∞—Ç–∞.id;
                console.log(`üè† ${this.–∏–º—è} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ "${message.–∫–æ–º–Ω–∞—Ç–∞.–Ω–∞–∑–≤–∞–Ω–∏–µ}"`);
                break;
            case '—É—á–∞—Å—Ç–Ω–∏–∫–∏-–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã':
                console.log(`üë• ${this.–∏–º—è} –≤–∏–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: [${message.—É—á–∞—Å—Ç–Ω–∏–∫–∏.map((—É) => —É.–∏–º—è).join(', ')}]`);
                break;
            case '–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã':
                console.log(`üìã ${this.–∏–º—è} –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç: [${message.–∫–æ–º–Ω–∞—Ç—ã.map((–∫) => –∫.–Ω–∞–∑–≤–∞–Ω–∏–µ).join(', ')}]`);
                break;
        }
    }
    joinRoom(roomId) {
        if (!this.ws || this.ws.readyState !== ws_1.default.OPEN) {
            console.error(`‚ùå ${this.–∏–º—è}: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω`);
            return;
        }
        this.send({
            —Ç–∏–ø: '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è-–∫-–∫–æ–º–Ω–∞—Ç–µ',
            –∫–æ–º–Ω–∞—Ç–∞_id: roomId,
            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.userId
        });
    }
    leaveRoom() {
        if (!this.currentRoom)
            return;
        this.send({
            —Ç–∏–ø: '–ø–æ–∫–∏–Ω—É—Ç—å-–∫–æ–º–Ω–∞—Ç—É',
            –∫–æ–º–Ω–∞—Ç–∞_id: this.currentRoom,
            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.userId
        });
        this.currentRoom = null;
    }
    toggleMicrophone(enabled) {
        if (!this.currentRoom)
            return;
        this.send({
            —Ç–∏–ø: '–º–∏–∫—Ä–æ—Ñ–æ–Ω-–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω',
            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: this.userId,
            –∫–æ–º–Ω–∞—Ç–∞_id: this.currentRoom,
            –≤–∫–ª—é—á–µ–Ω: enabled
        });
    }
    sendWebRTCSignal(to, data) {
        if (!this.currentRoom)
            return;
        this.send({
            —Ç–∏–ø: 'webrtc-signal',
            –æ—Ç: this.userId,
            –∫: to,
            –∫–æ–º–Ω–∞—Ç–∞: this.currentRoom,
            –¥–∞–Ω–Ω—ã–µ: data
        });
    }
    send(data) {
        if (this.ws && this.ws.readyState === ws_1.default.OPEN) {
            this.ws.send(JSON.stringify(data));
            console.log(`üì§ ${this.–∏–º—è} –æ—Ç–ø—Ä–∞–≤–∏–ª:`, data.—Ç–∏–ø);
        }
    }
    logMessage(message) {
        this.messageLog.push({
            –≤—Ä–µ–º—è: new Date(),
            —Ç–∏–ø: message.—Ç–∏–ø,
            –¥–∞–Ω–Ω—ã–µ: message
        });
    }
    onMessage(callback) {
        this.onMessageCallback = callback;
    }
    getMessageLog() {
        return this.messageLog;
    }
    getLastMessage() {
        const last = this.messageLog[this.messageLog.length - 1];
        return last ? last.–¥–∞–Ω–Ω—ã–µ : null;
    }
    disconnect() {
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
    }
    get name() {
        return this.–∏–º—è;
    }
    get id() {
        return this.userId;
    }
    get room() {
        return this.currentRoom;
    }
}
exports.VirtualUser = VirtualUser;
//# sourceMappingURL=VirtualUser.js.map