#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
const WebSocket = require('ws');

const wss = new WebSocket.Server({ port: 8080 });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–º–Ω–∞—Ç
const users = new Map(); // connection_id -> user_data
const rooms = new Map(); // room_id -> room_data
const connectionToUser = new Map(); // ws -> user_id

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
const defaultRooms = [
    { id: 'general', –Ω–∞–∑–≤–∞–Ω–∏–µ: '–û–±—â–∏–π', —É—á–∞—Å—Ç–Ω–∏–∫–∏: [], –º–∞–∫—Å–∏–º—É–º_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 50 },
    { id: 'important', –Ω–∞–∑–≤–∞–Ω–∏–µ: '–ö–æ–º–Ω–∞—Ç–∞ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤', —É—á–∞—Å—Ç–Ω–∏–∫–∏: [], –º–∞–∫—Å–∏–º—É–º_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 10 },
    { id: 'channel1', –Ω–∞–∑–≤–∞–Ω–∏–µ: '–ö–∞–Ω–∞–ª 1', —É—á–∞—Å—Ç–Ω–∏–∫–∏: [], –º–∞–∫—Å–∏–º—É–º_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 20 },
    { id: 'channel2', –Ω–∞–∑–≤–∞–Ω–∏–µ: '–ö–∞–Ω–∞–ª 2', —É—á–∞—Å—Ç–Ω–∏–∫–∏: [], –º–∞–∫—Å–∏–º—É–º_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 20 },
    { id: 'channel3', –Ω–∞–∑–≤–∞–Ω–∏–µ: '–ö–∞–Ω–∞–ª 3', —É—á–∞—Å—Ç–Ω–∏–∫–∏: [], –º–∞–∫—Å–∏–º—É–º_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 20 }
];

defaultRooms.forEach(room => {
    rooms.set(room.id, room);
});

console.log(`üöÄ Simple WebSocket server started on port 8080`);
console.log(`üìã Created ${defaultRooms.length} default rooms`);

function broadcastToRoom(roomId, message, excludeUserId = null) {
    const room = rooms.get(roomId);
    if (!room) return;
    
    room.—É—á–∞—Å—Ç–Ω–∏–∫–∏.forEach(userId => {
        if (userId !== excludeUserId) {
            const user = users.get(userId);
            if (user && user.ws && user.ws.readyState === WebSocket.OPEN) {
                user.ws.send(JSON.stringify(message));
            }
        }
    });
}

function sendMessage(ws, message) {
    if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify(message));
    }
}

wss.on('connection', function connection(ws) {
    console.log('üîó New WebSocket connection');
    let currentUserId = null;

    ws.on('message', function incoming(data) {
        try {
            const message = JSON.parse(data.toString());
            console.log('üì• Received:', message.—Ç–∏–ø, currentUserId ? `from ${currentUserId}` : '(no user)');

            switch (message.—Ç–∏–ø) {
                case '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è':
                    const –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = message.–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å;
                    currentUserId = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    users.set(currentUserId, {
                        ...–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
                        ws: ws,
                        –ø–æ–¥–∫–ª—é—á–µ–Ω: true
                    });
                    
                    connectionToUser.set(ws, currentUserId);
                    
                    console.log(`üë§ User ${–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.–∏–º—è} joined (${currentUserId})`);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
                    const –∫–æ–º–Ω–∞—Ç—ã = Array.from(rooms.values());
                    sendMessage(ws, {
                        —Ç–∏–ø: '–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                        –∫–æ–º–Ω–∞—Ç—ã: –∫–æ–º–Ω–∞—Ç—ã
                    });
                    break;

                case '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è-–∫-–∫–æ–º–Ω–∞—Ç–µ':
                    if (!currentUserId) {
                        sendMessage(ws, {
                            —Ç–∏–ø: '–æ—à–∏–±–∫–∞',
                            —Å–æ–æ–±—â–µ–Ω–∏–µ: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
                        });
                        return;
                    }

                    const roomId = message.–∫–æ–º–Ω–∞—Ç–∞_id;
                    const room = rooms.get(roomId);
                    
                    if (!room) {
                        sendMessage(ws, {
                            —Ç–∏–ø: '–æ—à–∏–±–∫–∞',
                            —Å–æ–æ–±—â–µ–Ω–∏–µ: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                        });
                        return;
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
                    if (!room.—É—á–∞—Å—Ç–Ω–∏–∫–∏.includes(currentUserId)) {
                        room.—É—á–∞—Å—Ç–Ω–∏–∫–∏.push(currentUserId);
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const user = users.get(currentUserId);
                    user.–≤_–∫–æ–º–Ω–∞—Ç–µ = roomId;

                    console.log(`üè† User ${currentUserId} joined room ${room.–Ω–∞–∑–≤–∞–Ω–∏–µ}`);

                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    sendMessage(ws, {
                        —Ç–∏–ø: '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è-–∫-–∫–æ–º–Ω–∞—Ç–µ',
                        –∫–æ–º–Ω–∞—Ç–∞: room,
                        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user
                    });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
                    const —É—á–∞—Å—Ç–Ω–∏–∫–∏ = room.—É—á–∞—Å—Ç–Ω–∏–∫–∏.map(uid => users.get(uid)).filter(u => u);
                    broadcastToRoom(roomId, {
                        —Ç–∏–ø: '—É—á–∞—Å—Ç–Ω–∏–∫–∏-–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                        –∫–æ–º–Ω–∞—Ç–∞_id: roomId,
                        —É—á–∞—Å—Ç–Ω–∏–∫–∏: —É—á–∞—Å—Ç–Ω–∏–∫–∏
                    });

                    console.log(`üë• Room ${room.–Ω–∞–∑–≤–∞–Ω–∏–µ} participants: [${—É—á–∞—Å—Ç–Ω–∏–∫–∏.map(u => u.–∏–º—è).join(', ')}]`);
                    break;

                case '–ø–æ–∫–∏–Ω—É—Ç—å-–∫–æ–º–Ω–∞—Ç—É':
                    if (!currentUserId) return;
                    
                    const leaveRoomId = message.–∫–æ–º–Ω–∞—Ç–∞_id;
                    const leaveRoom = rooms.get(leaveRoomId);
                    
                    if (leaveRoom) {
                        leaveRoom.—É—á–∞—Å—Ç–Ω–∏–∫–∏ = leaveRoom.—É—á–∞—Å—Ç–Ω–∏–∫–∏.filter(uid => uid !== currentUserId);
                        
                        const leaveUser = users.get(currentUserId);
                        leaveUser.–≤_–∫–æ–º–Ω–∞—Ç–µ = null;

                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        broadcastToRoom(leaveRoomId, {
                            —Ç–∏–ø: '–ø–æ–∫–∏–Ω—É–ª-–∫–æ–º–Ω–∞—Ç—É',
                            –∫–æ–º–Ω–∞—Ç–∞_id: leaveRoomId,
                            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: currentUserId
                        });

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        const remainingParticipants = leaveRoom.—É—á–∞—Å—Ç–Ω–∏–∫–∏.map(uid => users.get(uid)).filter(u => u);
                        broadcastToRoom(leaveRoomId, {
                            —Ç–∏–ø: '—É—á–∞—Å—Ç–Ω–∏–∫–∏-–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                            –∫–æ–º–Ω–∞—Ç–∞_id: leaveRoomId,
                            —É—á–∞—Å—Ç–Ω–∏–∫–∏: remainingParticipants
                        });
                    }
                    break;

                case 'webrtc-signal':
                    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º WebRTC —Å–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                    const targetUserId = message.–∫;
                    const targetUser = users.get(targetUserId);
                    
                    if (targetUser && targetUser.ws) {
                        sendMessage(targetUser.ws, {
                            —Ç–∏–ø: 'webrtc-signal',
                            –æ—Ç: message.–æ—Ç,
                            –∫: message.–∫,
                            –∫–æ–º–Ω–∞—Ç–∞: message.–∫–æ–º–Ω–∞—Ç–∞,
                            –¥–∞–Ω–Ω—ã–µ: message.–¥–∞–Ω–Ω—ã–µ
                        });
                        console.log(`üîÑ WebRTC signal forwarded from ${message.–æ—Ç} to ${message.–∫}`);
                    }
                    break;

                default:
                    console.log(`‚ùì Unknown message type: ${message.—Ç–∏–ø}`);
                    break;
            }

        } catch (error) {
            console.error('‚ùå Error processing message:', error);
            sendMessage(ws, {
                —Ç–∏–ø: '–æ—à–∏–±–∫–∞',
                —Å–æ–æ–±—â–µ–Ω–∏–µ: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message
            });
        }
    });

    ws.on('close', function close() {
        console.log('üîå Connection closed');
        
        if (currentUserId) {
            const user = users.get(currentUserId);
            if (user && user.–≤_–∫–æ–º–Ω–∞—Ç–µ) {
                const room = rooms.get(user.–≤_–∫–æ–º–Ω–∞—Ç–µ);
                if (room) {
                    room.—É—á–∞—Å—Ç–Ω–∏–∫–∏ = room.—É—á–∞—Å—Ç–Ω–∏–∫–∏.filter(uid => uid !== currentUserId);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    broadcastToRoom(user.–≤_–∫–æ–º–Ω–∞—Ç–µ, {
                        —Ç–∏–ø: '–ø–æ–∫–∏–Ω—É–ª-–∫–æ–º–Ω–∞—Ç—É',
                        –∫–æ–º–Ω–∞—Ç–∞_id: user.–≤_–∫–æ–º–Ω–∞—Ç–µ,
                        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_id: currentUserId
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    const remainingParticipants = room.—É—á–∞—Å—Ç–Ω–∏–∫–∏.map(uid => users.get(uid)).filter(u => u);
                    broadcastToRoom(user.–≤_–∫–æ–º–Ω–∞—Ç–µ, {
                        —Ç–∏–ø: '—É—á–∞—Å—Ç–Ω–∏–∫–∏-–∫–æ–º–Ω–∞—Ç—ã-–æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                        –∫–æ–º–Ω–∞—Ç–∞_id: user.–≤_–∫–æ–º–Ω–∞—Ç–µ,
                        —É—á–∞—Å—Ç–Ω–∏–∫–∏: remainingParticipants
                    });
                }
            }
            
            users.delete(currentUserId);
            connectionToUser.delete(ws);
            console.log(`üëã User ${currentUserId} disconnected`);
        }
    });

    ws.on('error', function error(err) {
        console.error('‚ùå WebSocket error:', err);
    });
});