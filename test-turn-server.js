// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã TURN —Å–µ—Ä–≤–µ—Ä–∞
// –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Coturn

async function testTurnServer(turnServer, username, password) {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TURN —Å–µ—Ä–≤–µ—Ä–∞:', turnServer);
  
  const config = {
    iceServers: [
      {
        urls: turnServer,
        username: username,
        credential: password
      }
    ],
    iceCandidatePoolSize: 0
  };
  
  try {
    const pc = new RTCPeerConnection(config);
    const candidates = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    pc.onicecandidate = (event) => {
      if (event.candidate) {
        candidates.push(event.candidate);
        console.log('üìç ICE –∫–∞–Ω–¥–∏–¥–∞—Ç:', event.candidate.type, event.candidate.address);
        
        // relay –∫–∞–Ω–¥–∏–¥–∞—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TURN
        if (event.candidate.type === 'relay') {
          console.log('‚úÖ TURN —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω relay –∫–∞–Ω–¥–∏–¥–∞—Ç.');
        }
      }
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ICE
    pc.oniceconnectionstatechange = () => {
      console.log('üîÑ ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', pc.iceConnectionState);
    };
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ICE gathering
    pc.createDataChannel('test');
    
    // –°–æ–∑–¥–∞–µ–º offer
    const offer = await pc.createOffer();
    await pc.setLocalDescription(offer);
    
    // –ñ–¥–µ–º —Å–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    await new Promise(resolve => {
      pc.onicegatheringstatechange = () => {
        console.log('üìä ICE gathering —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', pc.iceGatheringState);
        if (pc.iceGatheringState === 'complete') {
          resolve();
        }
      };
      
      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º
      setTimeout(resolve, 10000);
    });
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const relayCandidate = candidates.find(c => c.type === 'relay');
    const srflxCandidate = candidates.find(c => c.type === 'srflx');
    
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:');
    console.log('–í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', candidates.length);
    console.log('STUN —Ä–∞–±–æ—Ç–∞–µ—Ç:', srflxCandidate ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç');
    console.log('TURN —Ä–∞–±–æ—Ç–∞–µ—Ç:', relayCandidate ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç');
    
    if (relayCandidate) {
      console.log('\nüéâ –û—Ç–ª–∏—á–Ω–æ! TURN —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω.');
      console.log('Relay –∞–¥—Ä–µ—Å:', relayCandidate.address + ':' + relayCandidate.port);
    } else if (srflxCandidate) {
      console.log('\n‚ö†Ô∏è STUN —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ TURN –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.');
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–ª–∞.');
    } else {
      console.log('\n‚ùå –ù–∏ STUN, –Ω–∏ TURN –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.');
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
    
    pc.close();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Coturn:
// testTurnServer('turn:hesovoice.online:3478', 'telegramvoice', '–í–ê–®_–ü–ê–†–û–õ–¨');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function fullDiagnostics() {
  console.log('üîç –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WebRTC –∏ ICE —Å–µ—Ä–≤–µ—Ä–æ–≤\n');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebRTC
  if (!window.RTCPeerConnection) {
    console.error('‚ùå WebRTC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ!');
    return;
  }
  
  console.log('‚úÖ WebRTC –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö STUN —Å–µ—Ä–≤–µ—Ä–æ–≤
  console.log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö STUN —Å–µ—Ä–≤–µ—Ä–æ–≤:');
  const publicStunServers = [
    'stun:stun.l.google.com:19302',
    'stun:stun1.l.google.com:19302'
  ];
  
  for (const server of publicStunServers) {
    const pc = new RTCPeerConnection({
      iceServers: [{ urls: server }]
    });
    
    let success = false;
    pc.onicecandidate = (e) => {
      if (e.candidate && e.candidate.type === 'srflx') {
        success = true;
        console.log(`‚úÖ ${server} - —Ä–∞–±–æ—Ç–∞–µ—Ç`);
      }
    };
    
    pc.createDataChannel('test');
    await pc.createOffer().then(o => pc.setLocalDescription(o));
    
    await new Promise(r => setTimeout(r, 3000));
    if (!success) {
      console.log(`‚ùå ${server} - –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω`);
    }
    
    pc.close();
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ NAT
  console.log('\nüåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ NAT:');
  try {
    const candidates = [];
    const pc1 = new RTCPeerConnection({
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    });
    
    pc1.onicecandidate = (e) => {
      if (e.candidate && e.candidate.type === 'srflx') {
        candidates.push(e.candidate.address);
      }
    };
    
    pc1.createDataChannel('test');
    await pc1.createOffer().then(o => pc1.setLocalDescription(o));
    await new Promise(r => setTimeout(r, 3000));
    pc1.close();
    
    if (candidates.length === 0) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π NAT');
    } else {
      console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π IP —á–µ—Ä–µ–∑ STUN:', candidates[0]);
      console.log('–¢–∏–ø NAT: –≤–µ—Ä–æ—è—Ç–Ω–æ Full Cone –∏–ª–∏ Port Restricted');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è NAT:', error);
  }
  
  console.log('\n‚ú® –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
console.log('–î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: fullDiagnostics()');
console.log('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TURN —Å–µ—Ä–≤–µ—Ä–∞: testTurnServer("turn:HOST:PORT", "USERNAME", "PASSWORD")');