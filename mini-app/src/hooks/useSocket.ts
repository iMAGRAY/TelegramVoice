import { useEffect, useState, useCallback } from 'react';
import { io, Socket } from 'socket.io-client';
import { СообщениеВебСокета, Пользователь, Комната } from '@/types';

interface UseSocketProps {
  серверUrl: string;
  пользователь: Пользователь | null;
  на_обновление_пользователей?: (пользователи: Пользователь[]) => void;
  на_обновление_комнат?: (комнаты: Комната[]) => void;
  на_ошибку?: (ошибка: string) => void;
}

export const useSocket = ({
  серверUrl,
  пользователь,
  на_обновление_пользователей,
  на_обновление_комнат,
  на_ошибку
}: UseSocketProps) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [подключено, setПодключено] = useState(false);
  const [загружается, setЗагружается] = useState(false);

  // Подключение к серверу
  const подключиться = useCallback(async () => {
    if (socket?.connected || !пользователь) return;

    try {
      setЗагружается(true);
      
      const новый_socket = io(серверUrl, {
        transports: ['websocket'],
        upgrade: false,
        rememberUpgrade: false,
        timeout: 5000,
        query: {
          пользователь_id: пользователь.id,
          имя: пользователь.имя,
          телеграм_id: пользователь.телеграм_id?.toString() || '',
        }
      });

      // Обработка успешного подключения
      новый_socket.on('connect', () => {
        console.log('Подключено к серверу WebSocket');
        setПодключено(true);
        setЗагружается(false);
      });

      // Обработка отключения
      новый_socket.on('disconnect', (причина) => {
        console.log('Отключено от сервера:', причина);
        setПодключено(false);
        
        // Автоматическое переподключение при неожиданном отключении
        if (причина === 'io server disconnect') {
          setTimeout(() => {
            новый_socket.connect();
          }, 1000);
        }
      });

      // Обработка ошибок подключения
      новый_socket.on('connect_error', (ошибка) => {
        console.error('Ошибка подключения к серверу:', ошибка);
        setПодключено(false);
        setЗагружается(false);
        на_ошибку?.('Не удалось подключиться к серверу');
      });

      // Обработка обновления списка пользователей
      новый_socket.on('пользователи-обновлены', (пользователи: Пользователь[]) => {
        на_обновление_пользователей?.(пользователи);
      });

      // Обработка обновления списка комнат
      новый_socket.on('комнаты-обновлены', (комнаты: Комната[]) => {
        на_обновление_комнат?.(комнаты);
      });

      // Обработка ошибок от сервера
      новый_socket.on('ошибка', (сообщение: string) => {
        console.error('Ошибка от сервера:', сообщение);
        на_ошибку?.(сообщение);
      });

      setSocket(новый_socket);
    } catch (error) {
      console.error('Ошибка создания WebSocket соединения:', error);
      setЗагружается(false);
      на_ошибку?.('Ошибка инициализации соединения');
    }
  }, [серверUrl, пользователь, на_обновление_пользователей, на_обновление_комнат, на_ошибку, socket?.connected]);

  // Отключение от сервера
  const отключиться = useCallback(() => {
    if (socket) {
      socket.disconnect();
      setSocket(null);
      setПодключено(false);
    }
  }, [socket]);

  // Присоединение к комнате
  const присоединиться_к_комнате = useCallback((комната_id: string, пароль?: string) => {
    if (socket && пользователь) {
      socket.emit('присоединиться-к-комнате', {
        комната_id,
        пользователь_id: пользователь.id,
        пароль
      });
    }
  }, [socket, пользователь]);

  // Покинуть комнату
  const покинуть_комнату = useCallback((комната_id: string) => {
    if (socket && пользователь) {
      socket.emit('покинуть-комнату', {
        комната_id,
        пользователь_id: пользователь.id
      });
    }
  }, [socket, пользователь]);

  // Создать новую комнату
  const создать_комнату = useCallback((название: string, максимум_участников: number = 10, приватная: boolean = false, пароль?: string) => {
    if (socket && пользователь) {
      socket.emit('создать-комнату', {
        название,
        создатель: пользователь.id,
        максимум_участников,
        приватная,
        пароль
      });
    }
  }, [socket, пользователь]);

  // Отправка сообщения
  const отправить_сообщение = useCallback((тип: string, данные: any, к?: string, комната?: string) => {
    if (socket && пользователь) {
      const сообщение: СообщениеВебСокета = {
        тип: тип as any,
        данные,
        от: пользователь.id,
        к,
        комната,
        время: Date.now()
      };
      
      socket.emit('сообщение', сообщение);
    }
  }, [socket, пользователь]);

  // Переключение состояния микрофона
  const переключить_микрофон = useCallback((включен: boolean, комната_id?: string) => {
    if (socket && пользователь) {
      socket.emit('микрофон-переключен', {
        пользователь_id: пользователь.id,
        комната_id,
        включен
      });
    }
  }, [socket, пользователь]);

  // Уведомление о том, что пользователь говорит
  const уведомить_о_речи = useCallback((говорит: boolean, комната_id?: string) => {
    if (socket && пользователь) {
      socket.emit('говорит', {
        пользователь_id: пользователь.id,
        комната_id,
        говорит
      });
    }
  }, [socket, пользователь]);

  // Получение списка комнат
  const получить_комнаты = useCallback(() => {
    if (socket) {
      socket.emit('получить-комнаты');
    }
  }, [socket]);

  // Получение списка пользователей в комнате
  const получить_пользователей_комнаты = useCallback((комната_id: string) => {
    if (socket) {
      socket.emit('получить-пользователей-комнаты', { комната_id });
    }
  }, [socket]);

  // Подписка на событие
  const подписаться = useCallback((событие: string, обработчик: (...args: any[]) => void) => {
    if (socket) {
      socket.on(событие, обработчик);
      
      return () => {
        socket.off(событие, обработчик);
      };
    }
    return () => {};
  }, [socket]);

  // Автоматическое подключение при наличии пользователя
  useEffect(() => {
    if (пользователь && !socket?.connected) {
      подключиться();
    }
    
    return () => {
      if (socket) {
        socket.disconnect();
      }
    };
  }, [пользователь, подключиться]);

  // Обработка переподключения при восстановлении соединения
  useEffect(() => {
    const обработать_онлайн = () => {
      if (пользователь && socket && !socket.connected) {
        socket.connect();
      }
    };

    window.addEventListener('online', обработать_онлайн);
    
    return () => {
      window.removeEventListener('online', обработать_онлайн);
    };
  }, [пользователь, socket]);

  return {
    socket,
    подключено,
    загружается,
    подключиться,
    отключиться,
    присоединиться_к_комнате,
    покинуть_комнату,
    создать_комнату,
    отправить_сообщение,
    переключить_микрофон,
    уведомить_о_речи,
    получить_комнаты,
    получить_пользователей_комнаты,
    подписаться
  };
};