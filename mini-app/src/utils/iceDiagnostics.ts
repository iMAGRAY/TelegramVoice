// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ WebRTC ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

import { ICEServer, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_ice_—Å–µ—Ä–≤–µ—Ä, –ø—É–±–ª–∏—á–Ω—ã–µ_stun_—Å–µ—Ä–≤–µ—Ä—ã, –ø—É–±–ª–∏—á–Ω—ã–µ_turn_—Å–µ—Ä–≤–µ—Ä—ã } from '@/config/iceServers';

export interface ICE–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ {
  —Å–µ—Ä–≤–µ—Ä: ICEServer;
  –¥–æ—Å—Ç—É–ø–µ–Ω: boolean;
  –∑–∞–¥–µ—Ä–∂–∫–∞?: number;
  –æ—à–∏–±–∫–∞?: string;
}

export interface –†–µ–∑—É–ª—å—Ç–∞—Ç–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ {
  stun_—Å–µ—Ä–≤–µ—Ä—ã: ICE–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞[];
  turn_—Å–µ—Ä–≤–µ—Ä—ã: ICE–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞[];
  —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: string[];
  –æ–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ: '–æ—Ç–ª–∏—á–Ω–æ' | '—Ö–æ—Ä–æ—à–æ' | '–ø–ª–æ—Ö–æ';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ STUN —Å–µ—Ä–≤–µ—Ä–∞
async function –∏–∑–º–µ—Ä–∏—Ç—å_–∑–∞–¥–µ—Ä–∂–∫—É(url: string): Promise<number> {
  let pc: RTCPeerConnection | null = null;
  
  try {
    const start = performance.now();
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
    pc = new RTCPeerConnection({
      iceServers: [{ urls: url }],
    });
    
    await new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('Timeout'));
      }, 2000); // –£–º–µ–Ω—å—à–∏–ª timeout –¥–æ 2 —Å–µ–∫
      
      if (!pc) {
        clearTimeout(timeout);
        reject(new Error('PeerConnection –Ω–µ —Å–æ–∑–¥–∞–Ω'));
        return;
      }
      
      pc.onicecandidate = (event) => {
        if (event.candidate) {
          clearTimeout(timeout);
          resolve(null);
        }
      };
      
      pc.onicecandidateerror = () => {
        clearTimeout(timeout);
        reject(new Error('ICE candidate error'));
      };
      
      pc.createDataChannel('ping');
      pc.createOffer()
        .then(offer => pc?.setLocalDescription(offer))
        .catch(reject);
    });
    
    return performance.now() - start;
  } catch (error) {
    // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ ICE –¥–ª—è production
    return -1;
  } finally {
    // –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (pc) {
      try {
        pc.close();
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ PeerConnection:', e);
      }
    }
  }
}

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö ICE —Å–µ—Ä–≤–µ—Ä–æ–≤ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
export async function –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å_ice_—Å–µ—Ä–≤–µ—Ä—ã(): Promise<–†–µ–∑—É–ª—å—Ç–∞—Ç–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏> {
  const stun_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ICE–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞[] = [];
  const turn_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ICE–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞[] = [];
  const —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: string[] = [];
  
  // –ö–†–ò–¢–ò–ß–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 STUN —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
  for (const —Å–µ—Ä–≤–µ—Ä of –ø—É–±–ª–∏—á–Ω—ã–µ_stun_—Å–µ—Ä–≤–µ—Ä—ã.slice(0, 2)) {
    try {
      const start = performance.now();
      const –¥–æ—Å—Ç—É–ø–µ–Ω = await –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_ice_—Å–µ—Ä–≤–µ—Ä(—Å–µ—Ä–≤–µ—Ä);
      const –∑–∞–¥–µ—Ä–∂–∫–∞ = –¥–æ—Å—Ç—É–ø–µ–Ω ? performance.now() - start : undefined;
      
      stun_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.push({
        —Å–µ—Ä–≤–µ—Ä,
        –¥–æ—Å—Ç—É–ø–µ–Ω,
        –∑–∞–¥–µ—Ä–∂–∫–∞,
      });
    } catch (error) {
      stun_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.push({
        —Å–µ—Ä–≤–µ—Ä,
        –¥–æ—Å—Ç—É–ø–µ–Ω: false,
        –æ—à–∏–±–∫–∞: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      });
    }
  }
  
  // –ö–†–ò–¢–ò–ß–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1 TURN —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏  
  for (const —Å–µ—Ä–≤–µ—Ä of –ø—É–±–ª–∏—á–Ω—ã–µ_turn_—Å–µ—Ä–≤–µ—Ä—ã.slice(0, 1)) {
    try {
      const start = performance.now();
      const –¥–æ—Å—Ç—É–ø–µ–Ω = await –ø—Ä–æ–≤–µ—Ä–∏—Ç—å_ice_—Å–µ—Ä–≤–µ—Ä(—Å–µ—Ä–≤–µ—Ä);
      const –∑–∞–¥–µ—Ä–∂–∫–∞ = –¥–æ—Å—Ç—É–ø–µ–Ω ? performance.now() - start : undefined;
      
      turn_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.push({
        —Å–µ—Ä–≤–µ—Ä,
        –¥–æ—Å—Ç—É–ø–µ–Ω,
        –∑–∞–¥–µ—Ä–∂–∫–∞,
      });
    } catch (error) {
      turn_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.push({
        —Å–µ—Ä–≤–µ—Ä,
        –¥–æ—Å—Ç—É–ø–µ–Ω: false,
        –æ—à–∏–±–∫–∞: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      });
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const —Ä–∞–±–æ—á–∏–µ_stun = stun_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.filter(r => r.–¥–æ—Å—Ç—É–ø–µ–Ω).length;
  const —Ä–∞–±–æ—á–∏–µ_turn = turn_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.filter(r => r.–¥–æ—Å—Ç—É–ø–µ–Ω).length;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (—Ä–∞–±–æ—á–∏–µ_stun === 0) {
    —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.push('‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω STUN —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
  } else if (—Ä–∞–±–æ—á–∏–µ_stun < 2) {
    —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.push('‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ –º–∞–ª–æ STUN —Å–µ—Ä–≤–µ—Ä–æ–≤. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.');
  }
  
  if (—Ä–∞–±–æ—á–∏–µ_turn === 0) {
    —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.push('‚ö†Ô∏è TURN —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ú–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ —Å–ª–æ–∂–Ω—ã–µ NAT.');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
  const —Å—Ä–µ–¥–Ω—è—è_–∑–∞–¥–µ—Ä–∂–∫–∞ = stun_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    .filter(r => r.–¥–æ—Å—Ç—É–ø–µ–Ω && r.–∑–∞–¥–µ—Ä–∂–∫–∞)
    .reduce((sum, r) => sum + r.–∑–∞–¥–µ—Ä–∂–∫–∞!, 0) / —Ä–∞–±–æ—á–∏–µ_stun;
    
  if (—Å—Ä–µ–¥–Ω—è—è_–∑–∞–¥–µ—Ä–∂–∫–∞ > 1000) {
    —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.push('‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ ICE —Å–µ—Ä–≤–µ—Ä–æ–≤. –í–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.');
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  let –æ–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ: '–æ—Ç–ª–∏—á–Ω–æ' | '—Ö–æ—Ä–æ—à–æ' | '–ø–ª–æ—Ö–æ';
  
  if (—Ä–∞–±–æ—á–∏–µ_stun >= 3 && —Ä–∞–±–æ—á–∏–µ_turn >= 1 && —Å—Ä–µ–¥–Ω—è—è_–∑–∞–¥–µ—Ä–∂–∫–∞ < 500) {
    –æ–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ = '–æ—Ç–ª–∏—á–Ω–æ';
    —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.push('‚úÖ ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!');
  } else if (—Ä–∞–±–æ—á–∏–µ_stun >= 2 && —Å—Ä–µ–¥–Ω—è—è_–∑–∞–¥–µ—Ä–∂–∫–∞ < 1000) {
    –æ–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ = '—Ö–æ—Ä–æ—à–æ';
    —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.push('üëç ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.');
  } else {
    –æ–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ = '–ø–ª–æ—Ö–æ';
    —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.push('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å ICE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç—å.');
  }
  
  return {
    stun_—Å–µ—Ä–≤–µ—Ä—ã: stun_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã,
    turn_—Å–µ—Ä–≤–µ—Ä—ã: turn_—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã,
    —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏,
    –æ–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ,
  };
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø NAT
export async function –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å_—Ç–∏–ø_nat(): Promise<string> {
  try {
    const pc1 = new RTCPeerConnection({
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],
    });
    
    const pc2 = new RTCPeerConnection({
      iceServers: [{ urls: 'stun:stun1.l.google.com:19302' }],
    });
    
    const candidates: RTCIceCandidate[] = [];
    
    pc1.onicecandidate = (e) => {
      if (e.candidate && e.candidate.type === 'srflx') {
        candidates.push(e.candidate);
      }
    };
    
    pc2.onicecandidate = (e) => {
      if (e.candidate && e.candidate.type === 'srflx') {
        candidates.push(e.candidate);
      }
    };
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ICE
    pc1.createDataChannel('test1');
    pc2.createDataChannel('test2');
    
    await Promise.all([
      pc1.createOffer().then(o => pc1.setLocalDescription(o)),
      pc2.createOffer().then(o => pc2.setLocalDescription(o)),
    ]);
    
    // –ñ–¥–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    pc1.close();
    pc2.close();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    if (candidates.length === 0) {
      return '–°–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π NAT (—Å–ª–æ–∂–Ω—ã–π –¥–ª—è WebRTC)';
    }
    
    const addresses = candidates.map(c => c.address);
    const uniqueAddresses = new Set(addresses);
    
    if (uniqueAddresses.size === 1) {
      return 'Full Cone NAT (–ª—É—á—à–∏–π –¥–ª—è WebRTC)';
    } else if (uniqueAddresses.size === 2) {
      return 'Port Restricted NAT (—Ö–æ—Ä–æ—à–∏–π –¥–ª—è WebRTC)';
    } else {
      return '–°–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π NAT (–º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å TURN)';
    }
  } catch (error) {
    return '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø NAT';
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
export function —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å_–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É(—Ä–µ–∑—É–ª—å—Ç–∞—Ç: –†–µ–∑—É–ª—å—Ç–∞—Ç–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏): string {
  let —Ç–µ–∫—Å—Ç = 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ICE —Å–µ—Ä–≤–µ—Ä–æ–≤\n\n';
  
  —Ç–µ–∫—Å—Ç += 'üåê STUN —Å–µ—Ä–≤–µ—Ä—ã:\n';
  —Ä–µ–∑—É–ª—å—Ç–∞—Ç.stun_—Å–µ—Ä–≤–µ—Ä—ã.forEach(({ —Å–µ—Ä–≤–µ—Ä, –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–¥–µ—Ä–∂–∫–∞ }) => {
    —Ç–µ–∫—Å—Ç += `  ${–¥–æ—Å—Ç—É–ø–µ–Ω ? '‚úÖ' : '‚ùå'} ${—Å–µ—Ä–≤–µ—Ä.urls}`;
    if (–∑–∞–¥–µ—Ä–∂–∫–∞) —Ç–µ–∫—Å—Ç += ` (${Math.round(–∑–∞–¥–µ—Ä–∂–∫–∞)}ms)`;
    —Ç–µ–∫—Å—Ç += '\n';
  });
  
  —Ç–µ–∫—Å—Ç += '\nüîÑ TURN —Å–µ—Ä–≤–µ—Ä—ã:\n';
  —Ä–µ–∑—É–ª—å—Ç–∞—Ç.turn_—Å–µ—Ä–≤–µ—Ä—ã.forEach(({ —Å–µ—Ä–≤–µ—Ä, –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–¥–µ—Ä–∂–∫–∞ }) => {
    —Ç–µ–∫—Å—Ç += `  ${–¥–æ—Å—Ç—É–ø–µ–Ω ? '‚úÖ' : '‚ùå'} ${—Å–µ—Ä–≤–µ—Ä.urls}`;
    if (–∑–∞–¥–µ—Ä–∂–∫–∞) —Ç–µ–∫—Å—Ç += ` (${Math.round(–∑–∞–¥–µ—Ä–∂–∫–∞)}ms)`;
    —Ç–µ–∫—Å—Ç += '\n';
  });
  
  —Ç–µ–∫—Å—Ç += '\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n';
  —Ä–µ–∑—É–ª—å—Ç–∞—Ç.—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.forEach(—Ä => {
    —Ç–µ–∫—Å—Ç += `  ${—Ä}\n`;
  });
  
  —Ç–µ–∫—Å—Ç += `\nüéØ –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç.–æ–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ === '–æ—Ç–ª–∏—á–Ω–æ' ? 'üü¢ –û—Ç–ª–∏—á–Ω–æ' :
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç.–æ–±—â–µ–µ_—Å–æ—Å—Ç–æ—è–Ω–∏–µ === '—Ö–æ—Ä–æ—à–æ' ? 'üü° –•–æ—Ä–æ—à–æ' : 'üî¥ –ü–ª–æ—Ö–æ'
  }`;
  
  return —Ç–µ–∫—Å—Ç;
}