name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 1) Проверка качества кода
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Test frontend build
        working-directory: mini-app
        run: |
          npm install
          npm run build
          echo "✅ Frontend сборка прошла успешно"

      - name: Test WebSocket server build
        working-directory: websocket-server
        run: |
          npm install
          npm run build
          echo "✅ WebSocket сервер сборка прошла успешно"

  # 2) Билд фронтенда и WebSocket сервера + upload artifacts
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Frontend build (static export) ---
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: mini-app
        run: npm install

      - name: Build and export frontend
        working-directory: mini-app
        run: |
          npm run build
          # Результат выходит в папку mini-app/out

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-static
          path: mini-app/out

      # --- WebSocket Server build ---
      - name: Setup Node.js for WebSocket Server
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install WebSocket server dependencies
        working-directory: websocket-server
        run: npm install

      - name: Build WebSocket server
        working-directory: websocket-server
        run: npm run build

      - name: Upload WebSocket server artifact
        uses: actions/upload-artifact@v4
        with:
          name: websocket-server
          path: websocket-server/

      - name: Upload project config files
        uses: actions/upload-artifact@v4
        with:
          name: project-config
          path: |
            ecosystem.config.js
            deploy.sh
            monitor.sh

  # 3) Деплой артефактов на сервер
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-static
          path: frontend-out

      - name: Download WebSocket server artifact
        uses: actions/download-artifact@v4
        with:
          name: websocket-server
          path: websocket-server

      - name: Download project config files
        uses: actions/download-artifact@v4
        with:
          name: project-config
          path: project-config

      - name: Copy frontend to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "frontend-out/*"
          target: "${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/mini-app/out/"
          strip_components: 1
          overwrite: true

      - name: Copy WebSocket server to server  
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "websocket-server/*"
          target: "${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/websocket-server/"
          strip_components: 1
          overwrite: true

      - name: Copy project config files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "project-config/*"
          target: "${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/"
          strip_components: 1
          overwrite: true

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "🚀 Начинаем развертывание..."
            
            # Отладочная информация
            echo "📁 Проверка структуры проекта:"
            ls -la ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/
            
            # Создаем необходимые директории
            mkdir -p ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/mini-app/out
            mkdir -p ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/websocket-server/dist
            mkdir -p ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/logs
            
            echo "📁 Содержимое websocket-server:"
            ls -la ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/websocket-server/
            
            # Остановим старые процессы
            echo "🛑 Остановка старых процессов..."
            pm2 stop all || true
            pm2 delete all || true
            
            # Убиваем процессы на портах 8080 и 3000
            echo "🔪 Освобождение портов..."
            fuser -k 8080/tcp || true
            fuser -k 3000/tcp || true
            
            # Ждем освобождения портов
            sleep 3
            
            # Переходим в директорию проекта
            cd ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}
            
            # Устанавливаем зависимости WebSocket сервера
            cd websocket-server
            if [ -f "package.json" ]; then
              echo "📦 Найден package.json, устанавливаем зависимости..."
              npm install --only=production
              echo "✅ Зависимости WebSocket сервера установлены"
            else
              echo "❌ package.json не найден в websocket-server"
              echo "📁 Содержимое текущей директории:"
              ls -la
              echo "📁 Содержимое родительской директории:"
              ls -la ..
              exit 1
            fi
            
            # Проверяем наличие собранных файлов
            if [ -d "dist" ]; then
              echo "✅ Папка dist найдена"
              ls -la dist/
            else
              echo "❌ Папка dist не найдена"
              exit 1
            fi
            
            # Возвращаемся в корень проекта
            cd ..
            
            # Проверяем наличие ecosystem.config.js
            if [ ! -f "ecosystem.config.js" ]; then
              echo "📝 Создаем ecosystem.config.js..."
              cat > ecosystem.config.js << 'EOF'
            module.exports = {
              apps: [
                {
                  name: 'websocket-server',
                  script: 'node',
                  args: 'dist/index.js',
                  cwd: '${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/websocket-server',
                  env: {
                    NODE_ENV: 'production',
                    PORT: 8080
                  },
                  error_file: '${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/logs/websocket-server-error.log',
                  out_file: '${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/logs/websocket-server-out.log',
                  log_file: '${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/logs/websocket-server-combined.log',
                  time: true,
                  instances: 1,
                  exec_mode: 'fork',
                  autorestart: true,
                  max_restarts: 3,
                  min_uptime: '10s',
                  restart_delay: 5000
                },
                {
                  name: 'frontend',
                  script: 'serve',
                  args: '-s out -l 3000',
                  cwd: '${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/mini-app',
                  env: {
                    NODE_ENV: 'production'
                  },
                  error_file: '${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/logs/frontend-error.log',
                  out_file: '${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/logs/frontend-out.log',
                  log_file: '${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/logs/frontend-combined.log',
                  time: true,
                  instances: 1,
                  exec_mode: 'fork',
                  autorestart: true,
                  max_restarts: 3,
                  min_uptime: '10s',
                  restart_delay: 5000
                }
              ]
            };
            EOF
            fi
            
            # Устанавливаем serve глобально если не установлен
            if ! command -v serve &> /dev/null; then
              echo "📦 Устанавливаем serve..."
              npm install -g serve
            fi
            
            # Проверяем наличие файлов перед запуском
            echo "🔍 Финальная проверка файлов:"
            echo "Frontend out папка:"
            ls -la mini-app/out/ | head -5
            echo "WebSocket server dist папка:"
            ls -la websocket-server/dist/
            
            # Финальная очистка PM2
            echo "🧹 Финальная очистка PM2..."
            pm2 kill || true
            sleep 2
            
            # Проверяем что порты свободны
            echo "🔍 Проверка портов перед запуском..."
            if netstat -tlnp | grep :8080; then
              echo "⚠️ Порт 8080 все еще занят, принудительно освобождаем..."
              fuser -k 8080/tcp || true
              sleep 2
            fi
            
            if netstat -tlnp | grep :3000; then
              echo "⚠️ Порт 3000 все еще занят, принудительно освобождаем..."
              fuser -k 3000/tcp || true
              sleep 2
            fi
            
            # Запускаем через PM2
            echo "🚀 Запуск PM2 процессов..."
            pm2 start ecosystem.config.js
            pm2 save
            
            # Ждем запуска сервисов
            echo "⏳ Ожидание запуска сервисов..."
            sleep 15
            
            # Проверяем статус
            echo "📊 Статус PM2 после запуска:"
            pm2 status
            
            echo "✅ Развертывание завершено"

      - name: Post-deploy monitoring
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "🔍 Проверка состояния сервисов..."
            
            # Ждем запуска сервисов
            sleep 10
            
            # Проверяем PM2 процессы
            echo "📊 Статус PM2:"
            pm2 status
            
            # Проверяем WebSocket сервер
            echo "🔌 Проверка WebSocket сервера..."
            if timeout 10 bash -c "cat < /dev/tcp/localhost/8080" &>/dev/null; then
              echo "✅ WebSocket сервер доступен на порту 8080"
            else
              echo "❌ WebSocket сервер недоступен на порту 8080"
              echo "📝 Логи WebSocket сервера:"
              pm2 logs websocket-server --lines 20 --nostream
              echo "📝 Ошибки WebSocket сервера:"
              if [ -f "logs/websocket-server-error.log" ]; then
                tail -20 logs/websocket-server-error.log
              fi
              echo "📊 Статус процесса:"
              pm2 describe websocket-server
              exit 1
            fi
            
            # Проверяем HTTP сервер
            echo "🌐 Проверка HTTP сервера..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://localhost:3000 || echo "000")
            if [[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "404" ]]; then
              echo "✅ HTTP сервер доступен на порту 3000 (код $HTTP_CODE)"
            else
              echo "❌ HTTP сервер недоступен на порту 3000 (код $HTTP_CODE)"
              echo "📝 Логи Frontend сервера:"
              pm2 logs frontend --lines 20 --nostream
              echo "📝 Ошибки Frontend сервера:"
              if [ -f "logs/frontend-error.log" ]; then
                tail -20 logs/frontend-error.log
              fi
              echo "📊 Статус процесса:"
              pm2 describe frontend
              exit 1
            fi
            
            # Проверяем внешнюю доступность
            echo "🌍 Проверка внешней доступности..."
            EXTERNAL_HTTP=$(curl -s -o /dev/null -w "%{http_code}" --max-time 15 http://${{ secrets.SERVER_HOST }}:3000 || echo "000")
            if [[ "$EXTERNAL_HTTP" == "200" || "$EXTERNAL_HTTP" == "404" ]]; then
              echo "✅ Внешний доступ работает (код $EXTERNAL_HTTP)"
            else
              echo "⚠️ Внешний доступ может быть ограничен (код $EXTERNAL_HTTP)"
            fi
            
            echo ""
            echo "🎉 Развертывание успешно завершено!"
            echo "📊 Доступные URL:"
            echo "   • HTTP: http://${{ secrets.SERVER_HOST }}:3000"
            echo "   • WebSocket: ws://${{ secrets.SERVER_HOST }}:8080"