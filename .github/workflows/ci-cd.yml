name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –∏ —Ç–µ—Å—Ç—ã
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: mini-app/package-lock.json

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - name: Cache Rust crates
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install frontend dependencies
        working-directory: mini-app
        run: npm ci

      - name: Build frontend
        working-directory: mini-app
        run: npm run build

      - name: Check Rust code
        working-directory: signaling-server
        run: cargo check

      - name: Build Rust project (release)
        working-directory: signaling-server
        run: cargo build --release

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ—Ç–∫–∏ main)
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}
            git pull origin main
            chmod +x deploy.sh
            ./deploy.sh

      - name: Post-deploy monitoring
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}
            echo "üìä Monitoring after deployment..."
            chmod +x monitor.sh
            ./monitor.sh

      - name: Verify service availability
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üåê Checking external availability of services..."

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8080
            if timeout 5 bash -c "cat < /dev/tcp/${{ secrets.SERVER_HOST }}/8080" >/dev/null 2>&1; then
              echo "‚úÖ WebSocket server is reachable"
            else
              echo "‚ùå WebSocket server is not reachable"
              exit 1
            fi

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3000
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://${{ secrets.SERVER_HOST }}:3000 || echo "000")
            if [[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "404" ]]; then
              echo "‚úÖ HTTP server is reachable (code: $HTTP_CODE)"
            else
              echo "‚ùå HTTP server is not reachable (code: $HTTP_CODE)"
              exit 1
            fi

            echo "üéâ All services deployed and reachable!"
