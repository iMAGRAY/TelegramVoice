name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Test frontend build
        working-directory: mini-app
        run: |
          npm install
          npm run build
          echo "‚úÖ Frontend —Å–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"

      - name: Test WebSocket server build
        working-directory: websocket-server
        run: |
          npm install
          npm run build
          echo "‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —Å–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"

  # 2) –ë–∏–ª–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ + upload artifacts
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Frontend build (static export) ---
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: mini-app
        run: npm install

      - name: Build and export frontend
        working-directory: mini-app
        run: |
          npm run build
          # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ö–æ–¥–∏—Ç –≤ –ø–∞–ø–∫—É mini-app/out

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-static
          path: mini-app/out

      # --- WebSocket Server build ---
      - name: Setup Node.js for WebSocket Server
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install WebSocket server dependencies
        working-directory: websocket-server
        run: npm install

      - name: Build WebSocket server
        working-directory: websocket-server
        run: npm run build

      - name: Upload WebSocket server artifact
        uses: actions/upload-artifact@v4
        with:
          name: websocket-server
          path: |
            websocket-server/dist
            websocket-server/package.json
            websocket-server/package-lock.json

  # 3) –î–µ–ø–ª–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-static
          path: frontend-out

      - name: Download WebSocket server artifact
        uses: actions/download-artifact@v4
        with:
          name: websocket-server
          path: websocket-server

      - name: Copy frontend to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "frontend-out/*"
          target: "${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/mini-app/"
          strip_components: 1
          overwrite: true

      - name: Copy WebSocket server to server  
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "websocket-server/*"
          target: "${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/"
          strip_components: 1
          overwrite: true

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ..."
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            mkdir -p ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/mini-app/out
            mkdir -p ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/websocket-server/dist
            
            # –û—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            pm2 stop all || true
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            cd ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
            cd websocket-server
            if [ -f "package.json" ]; then
              npm install --only=production
              echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            else
              echo "‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ websocket-server"
              exit 1
            fi
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
            cd ..
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ecosystem.config.js
            if [ ! -f "ecosystem.config.js" ]; then
              echo "üìù –°–æ–∑–¥–∞–µ–º ecosystem.config.js..."
              cat > ecosystem.config.js << 'EOF'
            module.exports = {
              apps: [
                {
                  name: 'websocket-server',
                  script: 'dist/index.js',
                  cwd: './websocket-server',
                  env: {
                    NODE_ENV: 'production',
                    PORT: 8080
                  },
                  instances: 1,
                  autorestart: true,
                  watch: false,
                  max_memory_restart: '1G'
                },
                {
                  name: 'frontend',
                  script: 'serve',
                  args: '-s out -l 3000',
                  cwd: './mini-app',
                  env: {
                    NODE_ENV: 'production'
                  },
                  instances: 1,
                  autorestart: true,
                  watch: false
                }
              ]
            };
            EOF
            fi
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º serve –≥–ª–æ–±–∞–ª—å–Ω–æ –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if ! command -v serve &> /dev/null; then
              npm install -g serve
            fi
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ PM2
            pm2 start ecosystem.config.js
            pm2 save
            
            echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

      - name: Post-deploy monitoring
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            sleep 10
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã
            echo "üìä –°—Ç–∞—Ç—É—Å PM2:"
            pm2 status
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
            echo "üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞..."
            if timeout 10 bash -c "cat < /dev/tcp/localhost/8080" &>/dev/null; then
              echo "‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080"
            else
              echo "‚ùå WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080"
              pm2 logs websocket-server --lines 10
              exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
            echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://localhost:3000 || echo "000")
            if [[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "404" ]]; then
              echo "‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000 (–∫–æ–¥ $HTTP_CODE)"
            else
              echo "‚ùå HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000 (–∫–æ–¥ $HTTP_CODE)"
              pm2 logs frontend --lines 10
              exit 1
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            echo "üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
            EXTERNAL_HTTP=$(curl -s -o /dev/null -w "%{http_code}" --max-time 15 http://${{ secrets.SERVER_HOST }}:3000 || echo "000")
            if [[ "$EXTERNAL_HTTP" == "200" || "$EXTERNAL_HTTP" == "404" ]]; then
              echo "‚úÖ –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥ $EXTERNAL_HTTP)"
            else
              echo "‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω (–∫–æ–¥ $EXTERNAL_HTTP)"
            fi
            
            echo ""
            echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
            echo "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
            echo "   ‚Ä¢ HTTP: http://${{ secrets.SERVER_HOST }}:3000"
            echo "   ‚Ä¢ WebSocket: ws://${{ secrets.SERVER_HOST }}:8080"