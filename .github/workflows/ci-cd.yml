name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 1) –ë–∏–ª–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ + upload artifacts
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Frontend build (static export) ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: mini-app/package-lock.json

      - name: Install frontend dependencies
        working-directory: mini-app
        run: npm ci

      - name: Build and export frontend
        working-directory: mini-app
        run: |
          npm run build
          # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ö–æ–¥–∏—Ç –≤ –ø–∞–ø–∫—É mini-app/out

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-static
          path: mini-app/out

      # --- WebSocket Server build ---
      - name: Install WebSocket server dependencies
        working-directory: websocket-server
        run: npm ci

      - name: Build WebSocket server
        working-directory: websocket-server
        run: npm run build

      - name: Upload WebSocket server artifact
        uses: actions/upload-artifact@v4
        with:
          name: websocket-server
          path: |
            websocket-server/dist
            websocket-server/package.json
            websocket-server/package-lock.json

  # 2) –î–µ–ø–ª–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-static
          path: frontend-out

      - name: Download WebSocket server artifact
        uses: actions/download-artifact@v4
        with:
          name: websocket-server
          path: websocket-server

      - name: Copy frontend to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "frontend-out/*"
          target: "${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/mini-app/out/"
          strip_components: 1

      - name: Copy WebSocket server to server  
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "websocket-server/*"
          target: "${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/websocket-server/"
          strip_components: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # –û—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            pm2 stop all || true

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
            cd ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}/websocket-server
            npm ci --only=production

            # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ PM2
            cd ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}
            pm2 start ecosystem.config.js
            pm2 save

      - name: Post-deploy monitoring
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."

            # WebSocket
            if timeout 5 bash -c "cat < /dev/tcp/${{ secrets.SERVER_HOST }}/8080" &>/dev/null; then
              echo "‚úÖ WS OK"
            else
              echo "‚ùå WS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" && exit 1
            fi

            # HTTP
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://${{ secrets.SERVER_HOST }}:3000 || echo "000")
            if [[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "404" ]]; then
              echo "‚úÖ HTTP OK (–∫–æ–¥ $HTTP_CODE)"
            else
              echo "‚ùå HTTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ $HTTP_CODE)" && exit 1
            fi

            echo "üéâ –î–µ–ø–ª–æ–π –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!"