name: Simple Deploy

on:
  workflow_dispatch:  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    
    steps:
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          cd ${{ secrets.SERVER_PROJECT_PATH || '/root/TelegramVoice' }}
          
          # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
          pm2 stop all || true
          
          # –°–±—Ä–æ—Å git —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          git reset --hard HEAD
          git clean -fd
          git pull origin main
          
          # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
          pm2 delete all || true
          
          # –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
          cd mini-app
          npm install
          npm run build
          
          # –°–±–æ—Ä–∫–∞ Rust backend
          cd ../signaling-server
          if command -v cargo &> /dev/null; then
            cargo build --release
            echo "‚úÖ Rust —Å–µ—Ä–≤–µ—Ä —Å–æ–±—Ä–∞–Ω"
          else
            echo "‚ùå Cargo –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Rust"
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source ~/.cargo/env
            cargo build --release
          fi
          
          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
          cd ..
          if [ ! -f /etc/nginx/sites-enabled/telegramvoice ]; then
            echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
            chmod +x setup-nginx.sh
            ./setup-nginx.sh
          else
            echo "‚úÖ Nginx —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
          fi
          
          # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ PM2
          echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
          
          # –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
          if [ -f "signaling-server/target/release/signaling-server" ]; then
            echo "‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª signaling-server"
            pm2 start signaling-server/target/release/signaling-server --name "signaling-server" --log-date-format="YYYY-MM-DD HH:mm:ss Z"
          else
            echo "‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª signaling-server –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ signaling-server/target/release/"
            echo "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤:"
            find signaling-server -name "signaling-server*" -type f
            exit 1
          fi
          
          # –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (—Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã)
          cd mini-app
          pm2 start npx --name "frontend" -- serve -s out -l 3000
          cd ..
          
          # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PM2
          pm2 save
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
          pm2 status
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:"
          netstat -tlnp | grep -E ":8080|:3000" || echo "–ü–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          
          echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
          
          # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
          echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
          
          # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
          echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (10 —Å–µ–∫—É–Ω–¥)..."
          sleep 10
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket –Ω–∞–ø—Ä—è–º—É—é
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket –Ω–∞ –ø–æ—Ä—Ç—É 8080..."
          if timeout 5 bash -c "cat < /dev/tcp/localhost/8080" &>/dev/null; then
            echo "‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080"
          else
            echo "‚ùå WebSocket —Å–µ—Ä–≤–µ—Ä –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080"
            # –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            chmod +x diagnose-websocket.sh
            ./diagnose-websocket.sh
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            echo "üö® –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
            chmod +x emergency-fix.sh
            ./emergency-fix.sh
          fi
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://localhost:3000 || echo "000")
          if [[ "$HTTP_STATUS" == "200" || "$HTTP_STATUS" == "404" ]]; then
            echo "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å $HTTP_STATUS)"
          else
            echo "‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å $HTTP_STATUS)"
          fi
          
          echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
          
    - name: Final health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
          # WebSocket
          if timeout 5 bash -c "cat < /dev/tcp/localhost/8080" &>/dev/null; then
            echo "‚úÖ WS OK"
          else
            echo "‚ùå WS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" && exit 1
          fi
          # HTTP
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://localhost:3000 || echo "000")
          if [[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "404" ]]; then
            echo "‚úÖ HTTP OK (–∫–æ–¥ $HTTP_CODE)"
          else
            echo "‚ùå HTTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ $HTTP_CODE)" && exit 1
          fi
          echo "üéâ –î–µ–ø–ª–æ–π –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!"