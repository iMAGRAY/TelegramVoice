#!/bin/bash
# –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–µ–∫—Ç–∞ TelegramVoice

set -e

echo "üîß –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê TELEGRAMVOICE"
echo "==========================================="
echo

# 0. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /root/TelegramVoice

# 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
echo "üõë 1. –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í"
echo "------------------------------"
pm2 kill || true
killall node 2>/dev/null || true
killall signaling-server 2>/dev/null || true

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
echo "–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤..."
lsof -ti:8080 | xargs kill -9 2>/dev/null || true
lsof -ti:3000 | xargs kill -9 2>/dev/null || true
sleep 2
echo "‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
echo

# 2. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
echo "üßπ 2. –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –§–ê–ô–õ–û–í"
echo "---------------------------"
rm -rf mini-app/out
rm -rf mini-app/.next
rm -rf signaling-server/target
rm -rf ~/.pm2/logs/*
mkdir -p logs
echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
echo

# 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
echo "üì• 3. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–î–ê"
echo "--------------------"
git fetch origin
git reset --hard origin/main
git clean -fd
echo "‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"
echo

# 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üåê 4. –£–°–¢–ê–ù–û–í–ö–ê –ì–õ–û–ë–ê–õ–¨–ù–´–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô"
echo "--------------------------------------"
npm install -g pm2 serve
echo "‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
echo

# 5. –°–±–æ—Ä–∫–∞ signaling-server
echo "‚öôÔ∏è  5. –°–ë–û–†–ö–ê SIGNALING-SERVER"
echo "-----------------------------"
cd signaling-server
cargo clean
cargo build --release
chmod +x target/release/signaling-server

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
if [ -f "target/release/signaling-server" ]; then
    echo "‚úÖ Signaling-server —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
    ls -la target/release/signaling-server
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ signaling-server"
    exit 1
fi
cd ..
echo

# 6. –°–±–æ—Ä–∫–∞ frontend
echo "üèóÔ∏è  6. –°–ë–û–†–ö–ê FRONTEND"
echo "--------------------"
cd mini-app
rm -rf node_modules package-lock.json
npm install
npm run build

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
if [ -d "out" ]; then
    echo "‚úÖ Frontend —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
    echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: $(find out -type f | wc -l)"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ frontend"
    exit 1
fi
cd ..
echo

# 7. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ecosystem.config.js
echo "üìù 7. –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò PM2"
echo "-------------------------------"
cat > ecosystem.config.js << 'EOF'
module.exports = {
  apps: [
    {
      name: 'signaling-server',
      script: '/root/TelegramVoice/signaling-server/target/release/signaling-server',
      cwd: '/root/TelegramVoice/signaling-server',
      env: {
        RUST_LOG: 'info,signaling_server=debug'
      },
      error_file: '/root/TelegramVoice/logs/signaling-server-error.log',
      out_file: '/root/TelegramVoice/logs/signaling-server-out.log',
      log_file: '/root/TelegramVoice/logs/signaling-server-combined.log',
      time: true,
      instances: 1,
      autorestart: true,
      max_restarts: 10,
      min_uptime: '10s',
      restart_delay: 4000
    },
    {
      name: 'frontend',
      script: 'serve',
      args: '-s out -l 3000 --no-clipboard',
      cwd: '/root/TelegramVoice/mini-app',
      env: {
        NODE_ENV: 'production'
      },
      error_file: '/root/TelegramVoice/logs/frontend-error.log',
      out_file: '/root/TelegramVoice/logs/frontend-out.log',
      log_file: '/root/TelegramVoice/logs/frontend-combined.log',
      time: true,
      instances: 1,
      autorestart: true,
      max_restarts: 10,
      min_uptime: '10s',
      restart_delay: 4000
    }
  ]
};
EOF
echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
echo

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
echo "üîê 8. –£–°–¢–ê–ù–û–í–ö–ê –ü–†–ê–í"
echo "-------------------"
chmod +x signaling-server/target/release/signaling-server
chmod +x *.sh
echo "‚úÖ –ü—Ä–∞–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
echo

# 9. –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ PM2
echo "üöÄ 9. –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í"
echo "--------------------"
pm2 start ecosystem.config.js

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (15 —Å–µ–∫—É–Ω–¥)..."
sleep 15

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
pm2 status
echo

# 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
echo "üß™ 10. –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò"
echo "---------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket
echo -n "WebSocket (–ø–æ—Ä—Ç 8080): "
if timeout 5 bash -c "</dev/tcp/localhost/8080" 2>/dev/null; then
    echo "‚úÖ –†–ê–ë–û–¢–ê–ï–¢"
else
    echo "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
    echo "–õ–æ–≥–∏ signaling-server:"
    pm2 logs signaling-server --lines 30 --nostream
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP
echo -n "HTTP —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 3000): "
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 http://localhost:3000 || echo "000")
if [[ "$HTTP_CODE" == "200" || "$HTTP_CODE" == "404" ]]; then
    echo "‚úÖ –†–ê–ë–û–¢–ê–ï–¢ (–∫–æ–¥ $HTTP_CODE)"
else
    echo "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢ (–∫–æ–¥ $HTTP_CODE)"
    echo "–õ–æ–≥–∏ frontend:"
    pm2 logs frontend --lines 30 --nostream
fi

echo
echo "üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:"
netstat -tlnp | grep -E "(8080|3000)" || echo "–ü–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

echo
echo "‚ú® –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ï–ù"
echo
echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
echo "  pm2 status      - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
echo "  pm2 logs        - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "  pm2 monit       - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
echo "  ./full-diagnosis.sh - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
pm2 save
pm2 startup